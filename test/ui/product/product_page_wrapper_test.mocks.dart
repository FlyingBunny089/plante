// Mocks generated by Mockito 5.0.10 from annotations
// in plante/test/ui/product/product_page_wrapper_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;
import 'dart:io' as _i18;
import 'dart:math' as _i11;

import 'package:flutter/src/services/message_codec.dart' as _i19;
import 'package:flutter/src/widgets/framework.dart' as _i17;
import 'package:mockito/mockito.dart' as _i1;
import 'package:plante/base/base.dart' as _i15;
import 'package:plante/base/permissions_manager.dart' as _i20;
import 'package:plante/base/result.dart' as _i2;
import 'package:plante/location/location_controller.dart' as _i14;
import 'package:plante/model/product.dart' as _i5;
import 'package:plante/model/shop.dart' as _i10;
import 'package:plante/model/shop_product_range.dart' as _i12;
import 'package:plante/model/shop_type.dart' as _i13;
import 'package:plante/outside/backend/backend_product.dart' as _i7;
import 'package:plante/outside/map/shops_manager.dart' as _i8;
import 'package:plante/outside/map/shops_manager_types.dart' as _i9;
import 'package:plante/outside/products/products_manager.dart' as _i3;
import 'package:plante/outside/products/products_manager_error.dart' as _i6;
import 'package:plante/ui/photos_taker.dart' as _i16;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: comment_references
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

class _FakeResult<OK, ERR> extends _i1.Fake implements _i2.Result<OK, ERR> {}

/// A class which mocks [ProductsManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockProductsManager extends _i1.Mock implements _i3.ProductsManager {
  MockProductsManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Result<_i5.Product?, _i6.ProductsManagerError>> getProduct(
          String? barcodeRaw,
          [String? langCode]) =>
      (super.noSuchMethod(
          Invocation.method(#getProduct, [barcodeRaw, langCode]),
          returnValue:
              Future<_i2.Result<_i5.Product?, _i6.ProductsManagerError>>.value(
                  _FakeResult<_i5.Product?, _i6.ProductsManagerError>())) as _i4
          .Future<_i2.Result<_i5.Product?, _i6.ProductsManagerError>>);
  @override
  _i4.Future<_i2.Result<_i5.Product?, _i6.ProductsManagerError>> inflate(
          _i7.BackendProduct? backendProduct,
          [String? langCode]) =>
      (super.noSuchMethod(
          Invocation.method(#inflate, [backendProduct, langCode]),
          returnValue:
              Future<_i2.Result<_i5.Product?, _i6.ProductsManagerError>>.value(
                  _FakeResult<_i5.Product?, _i6.ProductsManagerError>())) as _i4
          .Future<_i2.Result<_i5.Product?, _i6.ProductsManagerError>>);
  @override
  _i4.Future<
      _i2.Result<_i5.Product, _i6.ProductsManagerError>> createUpdateProduct(
          _i5.Product? product,
          [String? langCode]) =>
      (super.noSuchMethod(
          Invocation.method(#createUpdateProduct, [product, langCode]),
          returnValue:
              Future<_i2.Result<_i5.Product, _i6.ProductsManagerError>>.value(
                  _FakeResult<_i5.Product, _i6.ProductsManagerError>())) as _i4
          .Future<_i2.Result<_i5.Product, _i6.ProductsManagerError>>);
  @override
  _i4.Future<_i2.Result<_i3.ProductWithOCRIngredients, _i6.ProductsManagerError>>
      updateProductAndExtractIngredients(_i5.Product? product, [String? langCode]) =>
          (super.noSuchMethod(
              Invocation.method(
                  #updateProductAndExtractIngredients, [product, langCode]),
              returnValue:
                  Future<_i2.Result<_i3.ProductWithOCRIngredients, _i6.ProductsManagerError>>.value(
                      _FakeResult<_i3.ProductWithOCRIngredients, _i6.ProductsManagerError>())) as _i4
              .Future<_i2.Result<_i3.ProductWithOCRIngredients, _i6.ProductsManagerError>>);
}

/// A class which mocks [ShopsManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockShopsManager extends _i1.Mock implements _i8.ShopsManager {
  MockShopsManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  int get loadedAreasCount =>
      (super.noSuchMethod(Invocation.getter(#loadedAreasCount), returnValue: 0)
          as int);
  @override
  void addListener(_i9.ShopsManagerListener? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void removeListener(_i9.ShopsManagerListener? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
  @override
  _i4.Future<_i2.Result<Map<String, _i10.Shop>, _i9.ShopsManagerError>> fetchShops(
          _i11.Point<double>? northeast, _i11.Point<double>? southwest) =>
      (super.noSuchMethod(
          Invocation.method(#fetchShops, [northeast, southwest]),
          returnValue: Future<
                  _i2.Result<Map<String, _i10.Shop>, _i9.ShopsManagerError>>.value(
              _FakeResult<Map<String, _i10.Shop>, _i9.ShopsManagerError>())) as _i4
          .Future<_i2.Result<Map<String, _i10.Shop>, _i9.ShopsManagerError>>);
  @override
  _i4.Future<_i2.Result<_i12.ShopProductRange, _i9.ShopsManagerError>>
      fetchShopProductRange(_i10.Shop? shop, {bool? noCache = false}) => (super
          .noSuchMethod(
              Invocation.method(
                  #fetchShopProductRange, [shop], {#noCache: noCache}),
              returnValue:
                  Future<_i2.Result<_i12.ShopProductRange, _i9.ShopsManagerError>>.value(
                      _FakeResult<_i12.ShopProductRange, _i9.ShopsManagerError>())) as _i4
          .Future<_i2.Result<_i12.ShopProductRange, _i9.ShopsManagerError>>);
  @override
  _i4.Future<_i2.Result<_i2.None, _i9.ShopsManagerError>> putProductToShops(
          _i5.Product? product, List<_i10.Shop>? shops) =>
      (super.noSuchMethod(
              Invocation.method(#putProductToShops, [product, shops]),
              returnValue:
                  Future<_i2.Result<_i2.None, _i9.ShopsManagerError>>.value(
                      _FakeResult<_i2.None, _i9.ShopsManagerError>()))
          as _i4.Future<_i2.Result<_i2.None, _i9.ShopsManagerError>>);
  @override
  _i4.Future<_i2.Result<_i10.Shop, _i9.ShopsManagerError>> createShop(
          {String? name, _i11.Point<double>? coords, _i13.ShopType? type}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #createShop, [], {#name: name, #coords: coords, #type: type}),
              returnValue:
                  Future<_i2.Result<_i10.Shop, _i9.ShopsManagerError>>.value(
                      _FakeResult<_i10.Shop, _i9.ShopsManagerError>()))
          as _i4.Future<_i2.Result<_i10.Shop, _i9.ShopsManagerError>>);
}

/// A class which mocks [LocationController].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocationController extends _i1.Mock
    implements _i14.LocationController {
  MockLocationController() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i11.Point<double>?> lastKnownPosition() =>
      (super.noSuchMethod(Invocation.method(#lastKnownPosition, []),
              returnValue: Future<_i11.Point<double>?>.value())
          as _i4.Future<_i11.Point<double>?>);
  @override
  _i4.Future<_i11.Point<double>?> currentPosition() =>
      (super.noSuchMethod(Invocation.method(#currentPosition, []),
              returnValue: Future<_i11.Point<double>?>.value())
          as _i4.Future<_i11.Point<double>?>);
  @override
  void callWhenLastPositionKnown(
          _i15.ArgCallback<_i11.Point<double>>? callback) =>
      super.noSuchMethod(
          Invocation.method(#callWhenLastPositionKnown, [callback]),
          returnValueForMissingStub: null);
}

/// A class which mocks [PhotosTaker].
///
/// See the documentation for Mockito's code generation for more information.
class MockPhotosTaker extends _i1.Mock implements _i16.PhotosTaker {
  MockPhotosTaker() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<Uri?> takeAndCropPhoto(
          _i17.BuildContext? context, _i18.Directory? outFolder) =>
      (super.noSuchMethod(
          Invocation.method(#takeAndCropPhoto, [context, outFolder]),
          returnValue: Future<Uri?>.value()) as _i4.Future<Uri?>);
  @override
  _i4.Future<Uri?> cropPhoto(String? photoPath, _i17.BuildContext? context,
          _i18.Directory? outFolder) =>
      (super.noSuchMethod(
          Invocation.method(#cropPhoto, [photoPath, context, outFolder]),
          returnValue: Future<Uri?>.value()) as _i4.Future<Uri?>);
  @override
  _i4.Future<_i2.Result<Uri, _i19.PlatformException>?> retrieveLostPhoto() =>
      (super.noSuchMethod(Invocation.method(#retrieveLostPhoto, []),
              returnValue:
                  Future<_i2.Result<Uri, _i19.PlatformException>?>.value())
          as _i4.Future<_i2.Result<Uri, _i19.PlatformException>?>);
}

/// A class which mocks [PermissionsManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockPermissionsManager extends _i1.Mock
    implements _i20.PermissionsManager {
  MockPermissionsManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i20.PermissionState> status(_i20.PermissionKind? permission) =>
      (super.noSuchMethod(Invocation.method(#status, [permission]),
              returnValue: Future<_i20.PermissionState>.value(
                  _i20.PermissionState.granted))
          as _i4.Future<_i20.PermissionState>);
  @override
  _i4.Future<_i20.PermissionState> request(_i20.PermissionKind? permission) =>
      (super.noSuchMethod(Invocation.method(#request, [permission]),
              returnValue: Future<_i20.PermissionState>.value(
                  _i20.PermissionState.granted))
          as _i4.Future<_i20.PermissionState>);
  @override
  _i4.Future<bool> openAppSettings() =>
      (super.noSuchMethod(Invocation.method(#openAppSettings, []),
          returnValue: Future<bool>.value(false)) as _i4.Future<bool>);
}
