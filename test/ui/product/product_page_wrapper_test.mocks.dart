// Mocks generated by Mockito 5.0.3 from annotations
// in plante/test/ui/product/product_page_wrapper_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i5;
import 'dart:io' as _i17;
import 'dart:math' as _i3;

import 'package:flutter/src/services/message_codec.dart' as _i18;
import 'package:flutter/src/widgets/framework.dart' as _i16;
import 'package:mockito/mockito.dart' as _i1;
import 'package:permission_handler_platform_interface/permission_handler_platform_interface.dart'
    as _i14;
import 'package:plante/base/result.dart' as _i2;
import 'package:plante/model/location_controller.dart' as _i13;
import 'package:plante/model/product.dart' as _i6;
import 'package:plante/model/shop.dart' as _i10;
import 'package:plante/model/shop_product_range.dart' as _i11;
import 'package:plante/model/shop_type.dart' as _i12;
import 'package:plante/outside/backend/backend_product.dart' as _i8;
import 'package:plante/outside/map/shops_manager.dart' as _i9;
import 'package:plante/outside/products/products_manager.dart' as _i4;
import 'package:plante/outside/products/products_manager_error.dart' as _i7;
import 'package:plante/ui/photos_taker.dart' as _i15;

// ignore_for_file: comment_references
// ignore_for_file: unnecessary_parenthesis

class _FakeResult<OK, ERR> extends _i1.Fake implements _i2.Result<OK, ERR> {}

class _FakePoint<T extends num> extends _i1.Fake implements _i3.Point<T> {}

class _FakeUri extends _i1.Fake implements Uri {}

/// A class which mocks [ProductsManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockProductsManager extends _i1.Mock implements _i4.ProductsManager {
  MockProductsManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.Result<_i6.Product?, _i7.ProductsManagerError>> getProduct(
          String? barcodeRaw,
          [String? langCode]) =>
      (super.noSuchMethod(
              Invocation.method(#getProduct, [barcodeRaw, langCode]),
              returnValue: Future.value(
                  _FakeResult<_i6.Product?, _i7.ProductsManagerError>()))
          as _i5.Future<_i2.Result<_i6.Product?, _i7.ProductsManagerError>>);
  @override
  _i5.Future<_i2.Result<_i6.Product?, _i7.ProductsManagerError>> inflate(
          _i8.BackendProduct? backendProduct,
          [String? langCode]) =>
      (super.noSuchMethod(
              Invocation.method(#inflate, [backendProduct, langCode]),
              returnValue: Future.value(
                  _FakeResult<_i6.Product?, _i7.ProductsManagerError>()))
          as _i5.Future<_i2.Result<_i6.Product?, _i7.ProductsManagerError>>);
  @override
  _i5.Future<_i2.Result<_i6.Product, _i7.ProductsManagerError>>
      createUpdateProduct(_i6.Product? product, [String? langCode]) => (super
              .noSuchMethod(
                  Invocation.method(#createUpdateProduct, [product, langCode]),
                  returnValue: Future.value(
                      _FakeResult<_i6.Product, _i7.ProductsManagerError>()))
          as _i5.Future<_i2.Result<_i6.Product, _i7.ProductsManagerError>>);
  @override
  _i5.Future<_i2.Result<_i4.ProductWithOCRIngredients, _i7.ProductsManagerError>>
      updateProductAndExtractIngredients(_i6.Product? product,
              [String? langCode]) =>
          (super.noSuchMethod(
              Invocation.method(
                  #updateProductAndExtractIngredients, [product, langCode]),
              returnValue: Future.value(
                  _FakeResult<_i4.ProductWithOCRIngredients, _i7.ProductsManagerError>())) as _i5
              .Future<_i2.Result<_i4.ProductWithOCRIngredients, _i7.ProductsManagerError>>);
}

/// A class which mocks [ShopsManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockShopsManager extends _i1.Mock implements _i9.ShopsManager {
  MockShopsManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void addListener(_i9.ShopsManagerListener? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void removeListener(_i9.ShopsManagerListener? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
  @override
  _i5.Future<
      _i2.Result<Map<String, _i10.Shop>, _i9.ShopsManagerError>> fetchShops(
          _i3.Point<double>? northeast, _i3.Point<double>? southwest) =>
      (super.noSuchMethod(Invocation.method(#fetchShops, [northeast, southwest]),
              returnValue: Future.value(
                  _FakeResult<Map<String, _i10.Shop>, _i9.ShopsManagerError>()))
          as _i5.Future<
              _i2.Result<Map<String, _i10.Shop>, _i9.ShopsManagerError>>);
  @override
  _i5.Future<_i2.Result<_i11.ShopProductRange, _i9.ShopsManagerError>>
      fetchShopProductRange(_i10.Shop? shop) => (super.noSuchMethod(
              Invocation.method(#fetchShopProductRange, [shop]),
              returnValue: Future.value(
                  _FakeResult<_i11.ShopProductRange, _i9.ShopsManagerError>()))
          as _i5.Future<
              _i2.Result<_i11.ShopProductRange, _i9.ShopsManagerError>>);
  @override
  _i5.Future<_i2.Result<_i2.None, _i9.ShopsManagerError>> putProductToShops(
          _i6.Product? product, List<_i10.Shop>? shops) =>
      (super.noSuchMethod(
              Invocation.method(#putProductToShops, [product, shops]),
              returnValue:
                  Future.value(_FakeResult<_i2.None, _i9.ShopsManagerError>()))
          as _i5.Future<_i2.Result<_i2.None, _i9.ShopsManagerError>>);
  @override
  _i5.Future<_i2.Result<_i10.Shop, _i9.ShopsManagerError>> createShop(
          {String? name, _i3.Point<double>? coords, _i12.ShopType? type}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #createShop, [], {#name: name, #coords: coords, #type: type}),
              returnValue:
                  Future.value(_FakeResult<_i10.Shop, _i9.ShopsManagerError>()))
          as _i5.Future<_i2.Result<_i10.Shop, _i9.ShopsManagerError>>);
}

/// A class which mocks [LocationController].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocationController extends _i1.Mock
    implements _i13.LocationController {
  MockLocationController() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i14.PermissionStatus> permissionStatus() =>
      (super.noSuchMethod(Invocation.method(#permissionStatus, []),
              returnValue: Future.value(_i14.PermissionStatus.granted))
          as _i5.Future<_i14.PermissionStatus>);
  @override
  _i5.Future<_i14.PermissionStatus> requestPermission() =>
      (super.noSuchMethod(Invocation.method(#requestPermission, []),
              returnValue: Future.value(_i14.PermissionStatus.granted))
          as _i5.Future<_i14.PermissionStatus>);
  @override
  _i5.Future<_i3.Point<double>?> lastKnownPosition() =>
      (super.noSuchMethod(Invocation.method(#lastKnownPosition, []),
              returnValue: Future.value(_FakePoint<double>()))
          as _i5.Future<_i3.Point<double>?>);
  @override
  _i5.Future<_i3.Point<double>?> currentPosition() =>
      (super.noSuchMethod(Invocation.method(#currentPosition, []),
              returnValue: Future.value(_FakePoint<double>()))
          as _i5.Future<_i3.Point<double>?>);
}

/// A class which mocks [PhotosTaker].
///
/// See the documentation for Mockito's code generation for more information.
class MockPhotosTaker extends _i1.Mock implements _i15.PhotosTaker {
  MockPhotosTaker() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<Uri?> takeAndCropPhoto(
          _i16.BuildContext? context, _i17.Directory? outFolder) =>
      (super.noSuchMethod(
          Invocation.method(#takeAndCropPhoto, [context, outFolder]),
          returnValue: Future.value(_FakeUri())) as _i5.Future<Uri?>);
  @override
  _i5.Future<Uri?> cropPhoto(String? photoPath, _i16.BuildContext? context,
          _i17.Directory? outFolder) =>
      (super.noSuchMethod(
          Invocation.method(#cropPhoto, [photoPath, context, outFolder]),
          returnValue: Future.value(_FakeUri())) as _i5.Future<Uri?>);
  @override
  _i5.Future<_i2.Result<Uri, _i18.PlatformException>?> retrieveLostPhoto() =>
      (super.noSuchMethod(Invocation.method(#retrieveLostPhoto, []),
              returnValue:
                  Future.value(_FakeResult<Uri, _i18.PlatformException>()))
          as _i5.Future<_i2.Result<Uri, _i18.PlatformException>?>);
}
