// Mocks generated by Mockito 5.0.3 from annotations
// in plante/test/ui/map/map_page_mode_default_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i8;
import 'dart:math' as _i3;
import 'dart:typed_data' as _i6;

import 'package:google_maps_flutter/google_maps_flutter.dart' as _i16;
import 'package:google_maps_flutter_platform_interface/src/types/camera.dart'
    as _i18;
import 'package:google_maps_flutter_platform_interface/src/types/location.dart'
    as _i4;
import 'package:google_maps_flutter_platform_interface/src/types/marker.dart'
    as _i19;
import 'package:google_maps_flutter_platform_interface/src/types/screen_coordinate.dart'
    as _i5;
import 'package:google_maps_flutter_platform_interface/src/types/tile_overlay.dart'
    as _i17;
import 'package:mockito/mockito.dart' as _i1;
import 'package:plante/base/base.dart' as _i15;
import 'package:plante/base/permissions_manager.dart' as _i7;
import 'package:plante/base/result.dart' as _i2;
import 'package:plante/location/location_controller.dart' as _i14;
import 'package:plante/model/product.dart' as _i12;
import 'package:plante/model/shop.dart' as _i10;
import 'package:plante/model/shop_product_range.dart' as _i11;
import 'package:plante/model/shop_type.dart' as _i13;
import 'package:plante/outside/map/shops_manager.dart' as _i9;

// ignore_for_file: comment_references
// ignore_for_file: unnecessary_parenthesis

class _FakeResult<OK, ERR> extends _i1.Fake implements _i2.Result<OK, ERR> {}

class _FakePoint<T extends num> extends _i1.Fake implements _i3.Point<T> {}

class _FakeLatLngBounds extends _i1.Fake implements _i4.LatLngBounds {}

class _FakeScreenCoordinate extends _i1.Fake implements _i5.ScreenCoordinate {}

class _FakeLatLng extends _i1.Fake implements _i4.LatLng {}

class _FakeUint8List extends _i1.Fake implements _i6.Uint8List {}

/// A class which mocks [PermissionsManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockPermissionsManager extends _i1.Mock
    implements _i7.PermissionsManager {
  MockPermissionsManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<_i7.PermissionState> status(_i7.PermissionKind? permission) =>
      (super.noSuchMethod(Invocation.method(#status, [permission]),
              returnValue: Future.value(_i7.PermissionState.granted))
          as _i8.Future<_i7.PermissionState>);
  @override
  _i8.Future<_i7.PermissionState> request(_i7.PermissionKind? permission) =>
      (super.noSuchMethod(Invocation.method(#request, [permission]),
              returnValue: Future.value(_i7.PermissionState.granted))
          as _i8.Future<_i7.PermissionState>);
  @override
  _i8.Future<bool> openAppSettings() =>
      (super.noSuchMethod(Invocation.method(#openAppSettings, []),
          returnValue: Future.value(false)) as _i8.Future<bool>);
}

/// A class which mocks [ShopsManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockShopsManager extends _i1.Mock implements _i9.ShopsManager {
  MockShopsManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void addListener(_i9.ShopsManagerListener? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void removeListener(_i9.ShopsManagerListener? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
  @override
  _i8.Future<
      _i2.Result<Map<String, _i10.Shop>, _i9.ShopsManagerError>> fetchShops(
          _i3.Point<double>? northeast, _i3.Point<double>? southwest) =>
      (super.noSuchMethod(Invocation.method(#fetchShops, [northeast, southwest]),
              returnValue: Future.value(
                  _FakeResult<Map<String, _i10.Shop>, _i9.ShopsManagerError>()))
          as _i8.Future<
              _i2.Result<Map<String, _i10.Shop>, _i9.ShopsManagerError>>);
  @override
  _i8.Future<_i2.Result<_i11.ShopProductRange, _i9.ShopsManagerError>>
      fetchShopProductRange(_i10.Shop? shop) => (super.noSuchMethod(
              Invocation.method(#fetchShopProductRange, [shop]),
              returnValue: Future.value(
                  _FakeResult<_i11.ShopProductRange, _i9.ShopsManagerError>()))
          as _i8.Future<
              _i2.Result<_i11.ShopProductRange, _i9.ShopsManagerError>>);
  @override
  _i8.Future<_i2.Result<_i2.None, _i9.ShopsManagerError>> putProductToShops(
          _i12.Product? product, List<_i10.Shop>? shops) =>
      (super.noSuchMethod(
              Invocation.method(#putProductToShops, [product, shops]),
              returnValue:
                  Future.value(_FakeResult<_i2.None, _i9.ShopsManagerError>()))
          as _i8.Future<_i2.Result<_i2.None, _i9.ShopsManagerError>>);
  @override
  _i8.Future<_i2.Result<_i10.Shop, _i9.ShopsManagerError>> createShop(
          {String? name, _i3.Point<double>? coords, _i13.ShopType? type}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #createShop, [], {#name: name, #coords: coords, #type: type}),
              returnValue:
                  Future.value(_FakeResult<_i10.Shop, _i9.ShopsManagerError>()))
          as _i8.Future<_i2.Result<_i10.Shop, _i9.ShopsManagerError>>);
}

/// A class which mocks [LocationController].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocationController extends _i1.Mock
    implements _i14.LocationController {
  MockLocationController() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<_i3.Point<double>?> lastKnownPosition() =>
      (super.noSuchMethod(Invocation.method(#lastKnownPosition, []),
              returnValue: Future.value(_FakePoint<double>()))
          as _i8.Future<_i3.Point<double>?>);
  @override
  _i8.Future<_i3.Point<double>?> currentPosition() =>
      (super.noSuchMethod(Invocation.method(#currentPosition, []),
              returnValue: Future.value(_FakePoint<double>()))
          as _i8.Future<_i3.Point<double>?>);
  @override
  void callWhenLastPositionKnown(
          _i15.ArgCallback<_i3.Point<double>>? callback) =>
      super.noSuchMethod(
          Invocation.method(#callWhenLastPositionKnown, [callback]),
          returnValueForMissingStub: null);
}

/// A class which mocks [GoogleMapController].
///
/// See the documentation for Mockito's code generation for more information.
class MockGoogleMapController extends _i1.Mock
    implements _i16.GoogleMapController {
  MockGoogleMapController() {
    _i1.throwOnMissingStub(this);
  }

  @override
  int get mapId =>
      (super.noSuchMethod(Invocation.getter(#mapId), returnValue: 0) as int);
  @override
  _i8.Future<void> clearTileCache(_i17.TileOverlayId? tileOverlayId) =>
      (super.noSuchMethod(Invocation.method(#clearTileCache, [tileOverlayId]),
          returnValue: Future.value(null),
          returnValueForMissingStub: Future.value()) as _i8.Future<void>);
  @override
  _i8.Future<void> animateCamera(_i18.CameraUpdate? cameraUpdate) =>
      (super.noSuchMethod(Invocation.method(#animateCamera, [cameraUpdate]),
          returnValue: Future.value(null),
          returnValueForMissingStub: Future.value()) as _i8.Future<void>);
  @override
  _i8.Future<void> moveCamera(_i18.CameraUpdate? cameraUpdate) =>
      (super.noSuchMethod(Invocation.method(#moveCamera, [cameraUpdate]),
          returnValue: Future.value(null),
          returnValueForMissingStub: Future.value()) as _i8.Future<void>);
  @override
  _i8.Future<void> setMapStyle(String? mapStyle) =>
      (super.noSuchMethod(Invocation.method(#setMapStyle, [mapStyle]),
          returnValue: Future.value(null),
          returnValueForMissingStub: Future.value()) as _i8.Future<void>);
  @override
  _i8.Future<_i4.LatLngBounds> getVisibleRegion() =>
      (super.noSuchMethod(Invocation.method(#getVisibleRegion, []),
              returnValue: Future.value(_FakeLatLngBounds()))
          as _i8.Future<_i4.LatLngBounds>);
  @override
  _i8.Future<_i5.ScreenCoordinate> getScreenCoordinate(_i4.LatLng? latLng) =>
      (super.noSuchMethod(Invocation.method(#getScreenCoordinate, [latLng]),
              returnValue: Future.value(_FakeScreenCoordinate()))
          as _i8.Future<_i5.ScreenCoordinate>);
  @override
  _i8.Future<_i4.LatLng> getLatLng(_i5.ScreenCoordinate? screenCoordinate) =>
      (super.noSuchMethod(Invocation.method(#getLatLng, [screenCoordinate]),
          returnValue: Future.value(_FakeLatLng())) as _i8.Future<_i4.LatLng>);
  @override
  _i8.Future<void> showMarkerInfoWindow(_i19.MarkerId? markerId) =>
      (super.noSuchMethod(Invocation.method(#showMarkerInfoWindow, [markerId]),
          returnValue: Future.value(null),
          returnValueForMissingStub: Future.value()) as _i8.Future<void>);
  @override
  _i8.Future<void> hideMarkerInfoWindow(_i19.MarkerId? markerId) =>
      (super.noSuchMethod(Invocation.method(#hideMarkerInfoWindow, [markerId]),
          returnValue: Future.value(null),
          returnValueForMissingStub: Future.value()) as _i8.Future<void>);
  @override
  _i8.Future<bool> isMarkerInfoWindowShown(_i19.MarkerId? markerId) => (super
      .noSuchMethod(Invocation.method(#isMarkerInfoWindowShown, [markerId]),
          returnValue: Future.value(false)) as _i8.Future<bool>);
  @override
  _i8.Future<double> getZoomLevel() =>
      (super.noSuchMethod(Invocation.method(#getZoomLevel, []),
          returnValue: Future.value(0.0)) as _i8.Future<double>);
  @override
  _i8.Future<_i6.Uint8List?> takeSnapshot() =>
      (super.noSuchMethod(Invocation.method(#takeSnapshot, []),
              returnValue: Future.value(_FakeUint8List()))
          as _i8.Future<_i6.Uint8List?>);
}
