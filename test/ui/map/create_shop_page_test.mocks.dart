// Mocks generated by Mockito 5.0.10 from annotations
// in plante/test/ui/map/create_shop_page_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i5;
import 'dart:math' as _i7;

import 'package:mockito/mockito.dart' as _i1;
import 'package:plante/base/result.dart' as _i2;
import 'package:plante/model/product.dart' as _i9;
import 'package:plante/model/shop.dart' as _i6;
import 'package:plante/model/shop_product_range.dart' as _i8;
import 'package:plante/model/shop_type.dart' as _i10;
import 'package:plante/outside/map/address_obtainer.dart' as _i11;
import 'package:plante/outside/map/open_street_map.dart' as _i13;
import 'package:plante/outside/map/osm_address.dart' as _i12;
import 'package:plante/outside/map/shops_manager.dart' as _i3;
import 'package:plante/outside/map/shops_manager_types.dart' as _i4;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: comment_references
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

class _FakeResult<OK, ERR> extends _i1.Fake implements _i2.Result<OK, ERR> {}

/// A class which mocks [ShopsManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockShopsManager extends _i1.Mock implements _i3.ShopsManager {
  MockShopsManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  int get loadedAreasCount =>
      (super.noSuchMethod(Invocation.getter(#loadedAreasCount), returnValue: 0)
          as int);
  @override
  void addListener(_i4.ShopsManagerListener? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void removeListener(_i4.ShopsManagerListener? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
  @override
  _i5.Future<_i2.Result<Map<String, _i6.Shop>, _i4.ShopsManagerError>> fetchShops(
          _i7.Point<double>? northeast, _i7.Point<double>? southwest) =>
      (super.noSuchMethod(
          Invocation.method(#fetchShops, [northeast, southwest]),
          returnValue: Future<
                  _i2.Result<Map<String, _i6.Shop>, _i4.ShopsManagerError>>.value(
              _FakeResult<Map<String, _i6.Shop>, _i4.ShopsManagerError>())) as _i5
          .Future<_i2.Result<Map<String, _i6.Shop>, _i4.ShopsManagerError>>);
  @override
  _i5.Future<_i2.Result<_i8.ShopProductRange, _i4.ShopsManagerError>>
      fetchShopProductRange(_i6.Shop? shop, {bool? noCache = false}) =>
          (super.noSuchMethod(
              Invocation.method(
                  #fetchShopProductRange, [shop], {#noCache: noCache}),
              returnValue:
                  Future<_i2.Result<_i8.ShopProductRange, _i4.ShopsManagerError>>.value(
                      _FakeResult<_i8.ShopProductRange, _i4.ShopsManagerError>())) as _i5
              .Future<_i2.Result<_i8.ShopProductRange, _i4.ShopsManagerError>>);
  @override
  _i5.Future<_i2.Result<_i2.None, _i4.ShopsManagerError>> putProductToShops(
          _i9.Product? product, List<_i6.Shop>? shops) =>
      (super.noSuchMethod(
              Invocation.method(#putProductToShops, [product, shops]),
              returnValue:
                  Future<_i2.Result<_i2.None, _i4.ShopsManagerError>>.value(
                      _FakeResult<_i2.None, _i4.ShopsManagerError>()))
          as _i5.Future<_i2.Result<_i2.None, _i4.ShopsManagerError>>);
  @override
  _i5.Future<_i2.Result<_i6.Shop, _i4.ShopsManagerError>> createShop(
          {String? name, _i7.Point<double>? coords, _i10.ShopType? type}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #createShop, [], {#name: name, #coords: coords, #type: type}),
              returnValue:
                  Future<_i2.Result<_i6.Shop, _i4.ShopsManagerError>>.value(
                      _FakeResult<_i6.Shop, _i4.ShopsManagerError>()))
          as _i5.Future<_i2.Result<_i6.Shop, _i4.ShopsManagerError>>);
}

/// A class which mocks [AddressObtainer].
///
/// See the documentation for Mockito's code generation for more information.
class MockAddressObtainer extends _i1.Mock implements _i11.AddressObtainer {
  MockAddressObtainer() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.Result<_i12.OsmAddress, _i13.OpenStreetMapError>>
      addressOfShop(_i6.Shop? shop) => (super.noSuchMethod(
          Invocation.method(#addressOfShop, [shop]),
          returnValue: Future<
                  _i2.Result<_i12.OsmAddress, _i13.OpenStreetMapError>>.value(
              _FakeResult<_i12.OsmAddress, _i13.OpenStreetMapError>())) as _i5
          .Future<_i2.Result<_i12.OsmAddress, _i13.OpenStreetMapError>>);
  @override
  _i5.Future<_i2.Result<_i12.OsmAddress, _i13.OpenStreetMapError>>
      addressOfCoords(_i7.Point<double>? coords) => (super.noSuchMethod(
          Invocation.method(#addressOfCoords, [coords]),
          returnValue: Future<
                  _i2.Result<_i12.OsmAddress, _i13.OpenStreetMapError>>.value(
              _FakeResult<_i12.OsmAddress, _i13.OpenStreetMapError>())) as _i5
          .Future<_i2.Result<_i12.OsmAddress, _i13.OpenStreetMapError>>);
}
