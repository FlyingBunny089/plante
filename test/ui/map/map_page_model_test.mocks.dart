// Mocks generated by Mockito 5.0.3 from annotations
// in plante/test/ui/map/map_page_model_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i5;
import 'dart:math' as _i2;

import 'package:mockito/mockito.dart' as _i1;
import 'package:plante/base/base.dart' as _i6;
import 'package:plante/base/permissions_manager.dart' as _i12;
import 'package:plante/base/result.dart' as _i3;
import 'package:plante/location/location_controller.dart' as _i4;
import 'package:plante/model/product.dart' as _i10;
import 'package:plante/model/shop.dart' as _i8;
import 'package:plante/model/shop_product_range.dart' as _i9;
import 'package:plante/model/shop_type.dart' as _i11;
import 'package:plante/outside/map/shops_manager.dart' as _i7;

// ignore_for_file: comment_references
// ignore_for_file: unnecessary_parenthesis

class _FakePoint<T extends num> extends _i1.Fake implements _i2.Point<T> {}

class _FakeResult<OK, ERR> extends _i1.Fake implements _i3.Result<OK, ERR> {}

/// A class which mocks [LocationController].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocationController extends _i1.Mock
    implements _i4.LocationController {
  MockLocationController() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.Point<double>?> lastKnownPosition() =>
      (super.noSuchMethod(Invocation.method(#lastKnownPosition, []),
              returnValue: Future.value(_FakePoint<double>()))
          as _i5.Future<_i2.Point<double>?>);
  @override
  _i5.Future<_i2.Point<double>?> currentPosition() =>
      (super.noSuchMethod(Invocation.method(#currentPosition, []),
              returnValue: Future.value(_FakePoint<double>()))
          as _i5.Future<_i2.Point<double>?>);
  @override
  void callWhenLastPositionKnown(
          _i6.ArgCallback<_i2.Point<double>>? callback) =>
      super.noSuchMethod(
          Invocation.method(#callWhenLastPositionKnown, [callback]),
          returnValueForMissingStub: null);
}

/// A class which mocks [ShopsManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockShopsManager extends _i1.Mock implements _i7.ShopsManager {
  MockShopsManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void addListener(_i7.ShopsManagerListener? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void removeListener(_i7.ShopsManagerListener? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
  @override
  _i5.Future<
      _i3.Result<Map<String, _i8.Shop>, _i7.ShopsManagerError>> fetchShops(
          _i2.Point<double>? northeast, _i2.Point<double>? southwest) =>
      (super.noSuchMethod(
              Invocation.method(#fetchShops, [northeast, southwest]),
              returnValue: Future.value(
                  _FakeResult<Map<String, _i8.Shop>, _i7.ShopsManagerError>()))
          as _i5
              .Future<_i3.Result<Map<String, _i8.Shop>, _i7.ShopsManagerError>>);
  @override
  _i5.Future<_i3.Result<_i9.ShopProductRange, _i7.ShopsManagerError>>
      fetchShopProductRange(_i8.Shop? shop) => (super.noSuchMethod(
              Invocation.method(#fetchShopProductRange, [shop]),
              returnValue: Future.value(
                  _FakeResult<_i9.ShopProductRange, _i7.ShopsManagerError>()))
          as _i5
              .Future<_i3.Result<_i9.ShopProductRange, _i7.ShopsManagerError>>);
  @override
  _i5.Future<_i3.Result<_i3.None, _i7.ShopsManagerError>> putProductToShops(
          _i10.Product? product, List<_i8.Shop>? shops) =>
      (super.noSuchMethod(
              Invocation.method(#putProductToShops, [product, shops]),
              returnValue:
                  Future.value(_FakeResult<_i3.None, _i7.ShopsManagerError>()))
          as _i5.Future<_i3.Result<_i3.None, _i7.ShopsManagerError>>);
  @override
  _i5.Future<_i3.Result<_i8.Shop, _i7.ShopsManagerError>> createShop(
          {String? name, _i2.Point<double>? coords, _i11.ShopType? type}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #createShop, [], {#name: name, #coords: coords, #type: type}),
              returnValue:
                  Future.value(_FakeResult<_i8.Shop, _i7.ShopsManagerError>()))
          as _i5.Future<_i3.Result<_i8.Shop, _i7.ShopsManagerError>>);
}

/// A class which mocks [PermissionsManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockPermissionsManager extends _i1.Mock
    implements _i12.PermissionsManager {
  MockPermissionsManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i12.PermissionState> status(_i12.PermissionKind? permission) =>
      (super.noSuchMethod(Invocation.method(#status, [permission]),
              returnValue: Future.value(_i12.PermissionState.granted))
          as _i5.Future<_i12.PermissionState>);
  @override
  _i5.Future<_i12.PermissionState> request(_i12.PermissionKind? permission) =>
      (super.noSuchMethod(Invocation.method(#request, [permission]),
              returnValue: Future.value(_i12.PermissionState.granted))
          as _i5.Future<_i12.PermissionState>);
  @override
  _i5.Future<bool> openAppSettings() =>
      (super.noSuchMethod(Invocation.method(#openAppSettings, []),
          returnValue: Future.value(false)) as _i5.Future<bool>);
}
