// Mocks generated by Mockito 5.0.3 from annotations
// in plante/test/ui/scan/barcode_scan_page_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i5;
import 'dart:math' as _i3;

import 'package:flutter/src/widgets/navigator.dart' as _i15;
import 'package:flutter/src/widgets/routes.dart' as _i16;
import 'package:mockito/mockito.dart' as _i1;
import 'package:permission_handler_platform_interface/permission_handler_platform_interface.dart'
    as _i24;
import 'package:plante/base/permissions_manager.dart' as _i17;
import 'package:plante/base/result.dart' as _i2;
import 'package:plante/model/location_controller.dart' as _i23;
import 'package:plante/model/product.dart' as _i6;
import 'package:plante/model/shop.dart' as _i20;
import 'package:plante/model/shop_product_range.dart' as _i21;
import 'package:plante/model/shop_type.dart' as _i22;
import 'package:plante/model/user_params.dart' as _i10;
import 'package:plante/model/veg_status.dart' as _i12;
import 'package:plante/model/viewed_products_storage.dart' as _i18;
import 'package:plante/outside/backend/backend.dart' as _i9;
import 'package:plante/outside/backend/backend_error.dart' as _i11;
import 'package:plante/outside/backend/backend_product.dart' as _i8;
import 'package:plante/outside/backend/backend_products_at_shop.dart' as _i13;
import 'package:plante/outside/backend/backend_shop.dart' as _i14;
import 'package:plante/outside/map/shops_manager.dart' as _i19;
import 'package:plante/outside/products/products_manager.dart' as _i4;
import 'package:plante/outside/products/products_manager_error.dart' as _i7;

// ignore_for_file: comment_references
// ignore_for_file: unnecessary_parenthesis

class _FakeResult<OK, ERR> extends _i1.Fake implements _i2.Result<OK, ERR> {}

class _FakePoint<T extends num> extends _i1.Fake implements _i3.Point<T> {}

/// A class which mocks [ProductsManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockProductsManager extends _i1.Mock implements _i4.ProductsManager {
  MockProductsManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.Result<_i6.Product?, _i7.ProductsManagerError>> getProduct(
          String? barcodeRaw,
          [String? langCode]) =>
      (super.noSuchMethod(
              Invocation.method(#getProduct, [barcodeRaw, langCode]),
              returnValue: Future.value(
                  _FakeResult<_i6.Product?, _i7.ProductsManagerError>()))
          as _i5.Future<_i2.Result<_i6.Product?, _i7.ProductsManagerError>>);
  @override
  _i5.Future<_i2.Result<_i6.Product?, _i7.ProductsManagerError>> inflate(
          _i8.BackendProduct? backendProduct,
          [String? langCode]) =>
      (super.noSuchMethod(
              Invocation.method(#inflate, [backendProduct, langCode]),
              returnValue: Future.value(
                  _FakeResult<_i6.Product?, _i7.ProductsManagerError>()))
          as _i5.Future<_i2.Result<_i6.Product?, _i7.ProductsManagerError>>);
  @override
  _i5.Future<_i2.Result<_i6.Product, _i7.ProductsManagerError>>
      createUpdateProduct(_i6.Product? product, [String? langCode]) => (super
              .noSuchMethod(
                  Invocation.method(#createUpdateProduct, [product, langCode]),
                  returnValue: Future.value(
                      _FakeResult<_i6.Product, _i7.ProductsManagerError>()))
          as _i5.Future<_i2.Result<_i6.Product, _i7.ProductsManagerError>>);
  @override
  _i5.Future<_i2.Result<_i4.ProductWithOCRIngredients, _i7.ProductsManagerError>>
      updateProductAndExtractIngredients(_i6.Product? product,
              [String? langCode]) =>
          (super.noSuchMethod(
              Invocation.method(
                  #updateProductAndExtractIngredients, [product, langCode]),
              returnValue: Future.value(
                  _FakeResult<_i4.ProductWithOCRIngredients, _i7.ProductsManagerError>())) as _i5
              .Future<_i2.Result<_i4.ProductWithOCRIngredients, _i7.ProductsManagerError>>);
}

/// A class which mocks [Backend].
///
/// See the documentation for Mockito's code generation for more information.
class MockBackend extends _i1.Mock implements _i9.Backend {
  MockBackend() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void addObserver(_i9.BackendObserver? observer) =>
      super.noSuchMethod(Invocation.method(#addObserver, [observer]),
          returnValueForMissingStub: null);
  @override
  void removeObserver(_i9.BackendObserver? observer) =>
      super.noSuchMethod(Invocation.method(#removeObserver, [observer]),
          returnValueForMissingStub: null);
  @override
  _i5.Future<bool> isLoggedIn() =>
      (super.noSuchMethod(Invocation.method(#isLoggedIn, []),
          returnValue: Future.value(false)) as _i5.Future<bool>);
  @override
  _i5.Future<_i2.Result<_i10.UserParams, _i11.BackendError>> loginOrRegister(
          String? googleIdToken) =>
      (super.noSuchMethod(Invocation.method(#loginOrRegister, [googleIdToken]),
              returnValue: Future.value(
                  _FakeResult<_i10.UserParams, _i11.BackendError>()))
          as _i5.Future<_i2.Result<_i10.UserParams, _i11.BackendError>>);
  @override
  _i5.Future<_i2.Result<bool, _i11.BackendError>> updateUserParams(
          _i10.UserParams? userParams,
          {String? backendClientTokenOverride}) =>
      (super.noSuchMethod(
              Invocation.method(#updateUserParams, [userParams],
                  {#backendClientTokenOverride: backendClientTokenOverride}),
              returnValue: Future.value(_FakeResult<bool, _i11.BackendError>()))
          as _i5.Future<_i2.Result<bool, _i11.BackendError>>);
  @override
  _i5.Future<_i2.Result<_i8.BackendProduct?, _i11.BackendError>> requestProduct(
          String? barcode) =>
      (super.noSuchMethod(Invocation.method(#requestProduct, [barcode]),
              returnValue: Future.value(
                  _FakeResult<_i8.BackendProduct?, _i11.BackendError>()))
          as _i5.Future<_i2.Result<_i8.BackendProduct?, _i11.BackendError>>);
  @override
  _i5.Future<_i2.Result<_i2.None, _i11.BackendError>> createUpdateProduct(
          String? barcode,
          {_i12.VegStatus? vegetarianStatus,
          _i12.VegStatus? veganStatus}) =>
      (super.noSuchMethod(
              Invocation.method(#createUpdateProduct, [
                barcode
              ], {
                #vegetarianStatus: vegetarianStatus,
                #veganStatus: veganStatus
              }),
              returnValue:
                  Future.value(_FakeResult<_i2.None, _i11.BackendError>()))
          as _i5.Future<_i2.Result<_i2.None, _i11.BackendError>>);
  @override
  _i5.Future<_i2.Result<_i2.None, _i11.BackendError>> sendReport(
          String? barcode, String? reportText) =>
      (super.noSuchMethod(Invocation.method(#sendReport, [barcode, reportText]),
              returnValue:
                  Future.value(_FakeResult<_i2.None, _i11.BackendError>()))
          as _i5.Future<_i2.Result<_i2.None, _i11.BackendError>>);
  @override
  _i5.Future<_i2.Result<_i2.None, _i11.BackendError>> sendProductScan(
          String? barcode) =>
      (super.noSuchMethod(Invocation.method(#sendProductScan, [barcode]),
              returnValue:
                  Future.value(_FakeResult<_i2.None, _i11.BackendError>()))
          as _i5.Future<_i2.Result<_i2.None, _i11.BackendError>>);
  @override
  _i5.Future<_i2.Result<_i10.UserParams, _i11.BackendError>> userData() =>
      (super.noSuchMethod(Invocation.method(#userData, []),
              returnValue: Future.value(
                  _FakeResult<_i10.UserParams, _i11.BackendError>()))
          as _i5.Future<_i2.Result<_i10.UserParams, _i11.BackendError>>);
  @override
  _i5.Future<_i2.Result<List<_i13.BackendProductsAtShop>, _i11.BackendError>>
      requestProductsAtShops(Iterable<String>? osmIds) => (super.noSuchMethod(
          Invocation.method(#requestProductsAtShops, [osmIds]),
          returnValue: Future.value(_FakeResult<
              List<_i13.BackendProductsAtShop>, _i11.BackendError>())) as _i5
          .Future<_i2.Result<List<_i13.BackendProductsAtShop>, _i11.BackendError>>);
  @override
  _i5.Future<_i2.Result<List<_i14.BackendShop>, _i11.BackendError>>
      requestShops(Iterable<String>? osmIds) => (super.noSuchMethod(
              Invocation.method(#requestShops, [osmIds]),
              returnValue: Future.value(
                  _FakeResult<List<_i14.BackendShop>, _i11.BackendError>()))
          as _i5.Future<_i2.Result<List<_i14.BackendShop>, _i11.BackendError>>);
  @override
  _i5.Future<_i2.Result<_i2.None, _i11.BackendError>> productPresenceVote(
          String? barcode, String? osmId, bool? positive) =>
      (super.noSuchMethod(
          Invocation.method(#productPresenceVote, [barcode, osmId, positive]),
          returnValue:
              Future.value(_FakeResult<_i2.None, _i11.BackendError>())) as _i5
          .Future<_i2.Result<_i2.None, _i11.BackendError>>);
  @override
  _i5.Future<_i2.Result<_i2.None, _i11.BackendError>> putProductToShop(
          String? barcode, String? osmId) =>
      (super.noSuchMethod(
              Invocation.method(#putProductToShop, [barcode, osmId]),
              returnValue:
                  Future.value(_FakeResult<_i2.None, _i11.BackendError>()))
          as _i5.Future<_i2.Result<_i2.None, _i11.BackendError>>);
  @override
  _i5.Future<_i2.Result<_i14.BackendShop, _i11.BackendError>> createShop(
          {String? name, _i3.Point<double>? coords, String? type}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #createShop, [], {#name: name, #coords: coords, #type: type}),
              returnValue: Future.value(
                  _FakeResult<_i14.BackendShop, _i11.BackendError>()))
          as _i5.Future<_i2.Result<_i14.BackendShop, _i11.BackendError>>);
}

/// A class which mocks [RouteObserver].
///
/// See the documentation for Mockito's code generation for more information.
class MockRouteObserver<R extends _i15.Route<dynamic>> extends _i1.Mock
    implements _i16.RouteObserver<R> {
  MockRouteObserver() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void subscribe(_i16.RouteAware? routeAware, R? route) =>
      super.noSuchMethod(Invocation.method(#subscribe, [routeAware, route]),
          returnValueForMissingStub: null);
  @override
  void unsubscribe(_i16.RouteAware? routeAware) =>
      super.noSuchMethod(Invocation.method(#unsubscribe, [routeAware]),
          returnValueForMissingStub: null);
  @override
  void didPop(_i15.Route<dynamic>? route, _i15.Route<dynamic>? previousRoute) =>
      super.noSuchMethod(Invocation.method(#didPop, [route, previousRoute]),
          returnValueForMissingStub: null);
  @override
  void didPush(
          _i15.Route<dynamic>? route, _i15.Route<dynamic>? previousRoute) =>
      super.noSuchMethod(Invocation.method(#didPush, [route, previousRoute]),
          returnValueForMissingStub: null);
  @override
  void didRemove(
          _i15.Route<dynamic>? route, _i15.Route<dynamic>? previousRoute) =>
      super.noSuchMethod(Invocation.method(#didRemove, [route, previousRoute]),
          returnValueForMissingStub: null);
  @override
  void didStartUserGesture(
          _i15.Route<dynamic>? route, _i15.Route<dynamic>? previousRoute) =>
      super.noSuchMethod(
          Invocation.method(#didStartUserGesture, [route, previousRoute]),
          returnValueForMissingStub: null);
}

/// A class which mocks [PermissionsManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockPermissionsManager extends _i1.Mock
    implements _i17.PermissionsManager {
  MockPermissionsManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i17.PermissionState> status(_i17.PermissionKind? permission) =>
      (super.noSuchMethod(Invocation.method(#status, [permission]),
              returnValue: Future.value(_i17.PermissionState.granted))
          as _i5.Future<_i17.PermissionState>);
  @override
  _i5.Future<_i17.PermissionState> request(_i17.PermissionKind? permission) =>
      (super.noSuchMethod(Invocation.method(#request, [permission]),
              returnValue: Future.value(_i17.PermissionState.granted))
          as _i5.Future<_i17.PermissionState>);
  @override
  _i5.Future<bool> openAppSettings() =>
      (super.noSuchMethod(Invocation.method(#openAppSettings, []),
          returnValue: Future.value(false)) as _i5.Future<bool>);
}

/// A class which mocks [ViewedProductsStorage].
///
/// See the documentation for Mockito's code generation for more information.
class MockViewedProductsStorage extends _i1.Mock
    implements _i18.ViewedProductsStorage {
  MockViewedProductsStorage() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Stream<void> updates() =>
      (super.noSuchMethod(Invocation.method(#updates, []),
          returnValue: Stream<void>.empty()) as _i5.Stream<void>);
  @override
  _i5.Future<void> loadPersistentProductsForTesting() => (super.noSuchMethod(
      Invocation.method(#loadPersistentProductsForTesting, []),
      returnValue: Future.value(null),
      returnValueForMissingStub: Future.value()) as _i5.Future<void>);
  @override
  List<_i6.Product> getProducts() =>
      (super.noSuchMethod(Invocation.method(#getProducts, []),
          returnValue: <_i6.Product>[]) as List<_i6.Product>);
  @override
  void addProduct(_i6.Product? product) =>
      super.noSuchMethod(Invocation.method(#addProduct, [product]),
          returnValueForMissingStub: null);
  @override
  _i5.Future<void> purgeForTesting() =>
      (super.noSuchMethod(Invocation.method(#purgeForTesting, []),
          returnValue: Future.value(null),
          returnValueForMissingStub: Future.value()) as _i5.Future<void>);
}

/// A class which mocks [ShopsManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockShopsManager extends _i1.Mock implements _i19.ShopsManager {
  MockShopsManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void addListener(_i19.ShopsManagerListener? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void removeListener(_i19.ShopsManagerListener? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
  @override
  _i5.Future<
      _i2.Result<Map<String, _i20.Shop>, _i19.ShopsManagerError>> fetchShops(
          _i3.Point<double>? northeast, _i3.Point<double>? southwest) =>
      (super.noSuchMethod(
          Invocation.method(#fetchShops, [northeast, southwest]),
          returnValue: Future.value(
              _FakeResult<Map<String, _i20.Shop>, _i19.ShopsManagerError>())) as _i5
          .Future<_i2.Result<Map<String, _i20.Shop>, _i19.ShopsManagerError>>);
  @override
  _i5.Future<_i2.Result<_i21.ShopProductRange, _i19.ShopsManagerError>>
      fetchShopProductRange(_i20.Shop? shop) => (super.noSuchMethod(
              Invocation.method(#fetchShopProductRange, [shop]),
              returnValue: Future.value(
                  _FakeResult<_i21.ShopProductRange, _i19.ShopsManagerError>()))
          as _i5.Future<
              _i2.Result<_i21.ShopProductRange, _i19.ShopsManagerError>>);
  @override
  _i5.Future<_i2.Result<_i2.None, _i19.ShopsManagerError>> putProductToShops(
          _i6.Product? product, List<_i20.Shop>? shops) =>
      (super.noSuchMethod(
              Invocation.method(#putProductToShops, [product, shops]),
              returnValue:
                  Future.value(_FakeResult<_i2.None, _i19.ShopsManagerError>()))
          as _i5.Future<_i2.Result<_i2.None, _i19.ShopsManagerError>>);
  @override
  _i5.Future<_i2.Result<_i20.Shop, _i19.ShopsManagerError>> createShop(
          {String? name, _i3.Point<double>? coords, _i22.ShopType? type}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #createShop, [], {#name: name, #coords: coords, #type: type}),
              returnValue: Future.value(
                  _FakeResult<_i20.Shop, _i19.ShopsManagerError>()))
          as _i5.Future<_i2.Result<_i20.Shop, _i19.ShopsManagerError>>);
}

/// A class which mocks [LocationController].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocationController extends _i1.Mock
    implements _i23.LocationController {
  MockLocationController() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i24.PermissionStatus> permissionStatus() =>
      (super.noSuchMethod(Invocation.method(#permissionStatus, []),
              returnValue: Future.value(_i24.PermissionStatus.granted))
          as _i5.Future<_i24.PermissionStatus>);
  @override
  _i5.Future<_i24.PermissionStatus> requestPermission() =>
      (super.noSuchMethod(Invocation.method(#requestPermission, []),
              returnValue: Future.value(_i24.PermissionStatus.granted))
          as _i5.Future<_i24.PermissionStatus>);
  @override
  _i5.Future<_i3.Point<double>?> lastKnownPosition() =>
      (super.noSuchMethod(Invocation.method(#lastKnownPosition, []),
              returnValue: Future.value(_FakePoint<double>()))
          as _i5.Future<_i3.Point<double>?>);
  @override
  _i5.Future<_i3.Point<double>?> currentPosition() =>
      (super.noSuchMethod(Invocation.method(#currentPosition, []),
              returnValue: Future.value(_FakePoint<double>()))
          as _i5.Future<_i3.Point<double>?>);
}
