// Mocks generated by Mockito 5.0.3 from annotations
// in plante/test/ui/scan/barcode_scan_page_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:flutter/src/widgets/navigator.dart' as _i14;
import 'package:flutter/src/widgets/routes.dart' as _i15;
import 'package:mockito/mockito.dart' as _i1;
import 'package:plante/base/permissions_manager.dart' as _i16;
import 'package:plante/base/result.dart' as _i2;
import 'package:plante/model/product.dart' as _i5;
import 'package:plante/model/user_params.dart' as _i8;
import 'package:plante/model/veg_status.dart' as _i11;
import 'package:plante/model/viewed_products_storage.dart' as _i17;
import 'package:plante/outside/backend/backend.dart' as _i7;
import 'package:plante/outside/backend/backend_error.dart' as _i9;
import 'package:plante/outside/backend/backend_product.dart' as _i10;
import 'package:plante/outside/backend/backend_products_at_shop.dart' as _i12;
import 'package:plante/outside/backend/backend_shop.dart' as _i13;
import 'package:plante/outside/products/products_manager.dart' as _i3;
import 'package:plante/outside/products/products_manager_error.dart' as _i6;

// ignore_for_file: comment_references
// ignore_for_file: unnecessary_parenthesis

class _FakeResult<OK, ERR> extends _i1.Fake implements _i2.Result<OK, ERR> {}

/// A class which mocks [ProductsManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockProductsManager extends _i1.Mock implements _i3.ProductsManager {
  MockProductsManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Result<_i5.Product?, _i6.ProductsManagerError>> getProduct(
          String? barcodeRaw,
          [String? langCode]) =>
      (super.noSuchMethod(
              Invocation.method(#getProduct, [barcodeRaw, langCode]),
              returnValue: Future.value(
                  _FakeResult<_i5.Product?, _i6.ProductsManagerError>()))
          as _i4.Future<_i2.Result<_i5.Product?, _i6.ProductsManagerError>>);
  @override
  _i4.Future<_i2.Result<_i5.Product, _i6.ProductsManagerError>>
      createUpdateProduct(_i5.Product? product, [String? langCode]) => (super
              .noSuchMethod(
                  Invocation.method(#createUpdateProduct, [product, langCode]),
                  returnValue: Future.value(
                      _FakeResult<_i5.Product, _i6.ProductsManagerError>()))
          as _i4.Future<_i2.Result<_i5.Product, _i6.ProductsManagerError>>);
  @override
  _i4.Future<_i2.Result<_i3.ProductWithOCRIngredients, _i6.ProductsManagerError>>
      updateProductAndExtractIngredients(_i5.Product? product,
              [String? langCode]) =>
          (super.noSuchMethod(
              Invocation.method(
                  #updateProductAndExtractIngredients, [product, langCode]),
              returnValue: Future.value(
                  _FakeResult<_i3.ProductWithOCRIngredients, _i6.ProductsManagerError>())) as _i4
              .Future<_i2.Result<_i3.ProductWithOCRIngredients, _i6.ProductsManagerError>>);
}

/// A class which mocks [Backend].
///
/// See the documentation for Mockito's code generation for more information.
class MockBackend extends _i1.Mock implements _i7.Backend {
  MockBackend() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void addObserver(_i7.BackendObserver? observer) =>
      super.noSuchMethod(Invocation.method(#addObserver, [observer]),
          returnValueForMissingStub: null);
  @override
  void removeObserver(_i7.BackendObserver? observer) =>
      super.noSuchMethod(Invocation.method(#removeObserver, [observer]),
          returnValueForMissingStub: null);
  @override
  _i4.Future<bool> isLoggedIn() =>
      (super.noSuchMethod(Invocation.method(#isLoggedIn, []),
          returnValue: Future.value(false)) as _i4.Future<bool>);
  @override
  _i4.Future<_i2.Result<_i8.UserParams, _i9.BackendError>> loginOrRegister(
          String? googleIdToken) =>
      (super.noSuchMethod(Invocation.method(#loginOrRegister, [googleIdToken]),
              returnValue:
                  Future.value(_FakeResult<_i8.UserParams, _i9.BackendError>()))
          as _i4.Future<_i2.Result<_i8.UserParams, _i9.BackendError>>);
  @override
  _i4.Future<_i2.Result<bool, _i9.BackendError>> updateUserParams(
          _i8.UserParams? userParams,
          {String? backendClientTokenOverride}) =>
      (super.noSuchMethod(
              Invocation.method(#updateUserParams, [userParams],
                  {#backendClientTokenOverride: backendClientTokenOverride}),
              returnValue: Future.value(_FakeResult<bool, _i9.BackendError>()))
          as _i4.Future<_i2.Result<bool, _i9.BackendError>>);
  @override
  _i4.Future<_i2.Result<_i10.BackendProduct?, _i9.BackendError>> requestProduct(
          String? barcode) =>
      (super.noSuchMethod(Invocation.method(#requestProduct, [barcode]),
              returnValue: Future.value(
                  _FakeResult<_i10.BackendProduct?, _i9.BackendError>()))
          as _i4.Future<_i2.Result<_i10.BackendProduct?, _i9.BackendError>>);
  @override
  _i4.Future<_i2.Result<_i2.None, _i9.BackendError>> createUpdateProduct(
          String? barcode,
          {_i11.VegStatus? vegetarianStatus,
          _i11.VegStatus? veganStatus}) =>
      (super.noSuchMethod(
              Invocation.method(#createUpdateProduct, [
                barcode
              ], {
                #vegetarianStatus: vegetarianStatus,
                #veganStatus: veganStatus
              }),
              returnValue:
                  Future.value(_FakeResult<_i2.None, _i9.BackendError>()))
          as _i4.Future<_i2.Result<_i2.None, _i9.BackendError>>);
  @override
  _i4.Future<_i2.Result<_i2.None, _i9.BackendError>> sendReport(
          String? barcode, String? reportText) =>
      (super.noSuchMethod(Invocation.method(#sendReport, [barcode, reportText]),
              returnValue:
                  Future.value(_FakeResult<_i2.None, _i9.BackendError>()))
          as _i4.Future<_i2.Result<_i2.None, _i9.BackendError>>);
  @override
  _i4.Future<_i2.Result<_i2.None, _i9.BackendError>> sendProductScan(
          String? barcode) =>
      (super.noSuchMethod(Invocation.method(#sendProductScan, [barcode]),
              returnValue:
                  Future.value(_FakeResult<_i2.None, _i9.BackendError>()))
          as _i4.Future<_i2.Result<_i2.None, _i9.BackendError>>);
  @override
  _i4.Future<_i2.Result<_i8.UserParams, _i9.BackendError>> userData() =>
      (super.noSuchMethod(Invocation.method(#userData, []),
              returnValue:
                  Future.value(_FakeResult<_i8.UserParams, _i9.BackendError>()))
          as _i4.Future<_i2.Result<_i8.UserParams, _i9.BackendError>>);
  @override
  _i4.Future<_i2.Result<List<_i12.BackendProductsAtShop>, _i9.BackendError>>
      requestProductsAtShops(Iterable<String>? osmIds) => (super.noSuchMethod(
          Invocation.method(#requestProductsAtShops, [osmIds]),
          returnValue: Future.value(_FakeResult<
              List<_i12.BackendProductsAtShop>, _i9.BackendError>())) as _i4
          .Future<_i2.Result<List<_i12.BackendProductsAtShop>, _i9.BackendError>>);
  @override
  _i4.Future<_i2.Result<List<_i13.BackendShop>, _i9.BackendError>> requestShops(
          Iterable<String>? osmIds) =>
      (super.noSuchMethod(Invocation.method(#requestShops, [osmIds]),
              returnValue: Future.value(
                  _FakeResult<List<_i13.BackendShop>, _i9.BackendError>()))
          as _i4.Future<_i2.Result<List<_i13.BackendShop>, _i9.BackendError>>);
}

/// A class which mocks [RouteObserver].
///
/// See the documentation for Mockito's code generation for more information.
class MockRouteObserver<R extends _i14.Route<dynamic>> extends _i1.Mock
    implements _i15.RouteObserver<R> {
  MockRouteObserver() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void subscribe(_i15.RouteAware? routeAware, R? route) =>
      super.noSuchMethod(Invocation.method(#subscribe, [routeAware, route]),
          returnValueForMissingStub: null);
  @override
  void unsubscribe(_i15.RouteAware? routeAware) =>
      super.noSuchMethod(Invocation.method(#unsubscribe, [routeAware]),
          returnValueForMissingStub: null);
  @override
  void didPop(_i14.Route<dynamic>? route, _i14.Route<dynamic>? previousRoute) =>
      super.noSuchMethod(Invocation.method(#didPop, [route, previousRoute]),
          returnValueForMissingStub: null);
  @override
  void didPush(
          _i14.Route<dynamic>? route, _i14.Route<dynamic>? previousRoute) =>
      super.noSuchMethod(Invocation.method(#didPush, [route, previousRoute]),
          returnValueForMissingStub: null);
  @override
  void didRemove(
          _i14.Route<dynamic>? route, _i14.Route<dynamic>? previousRoute) =>
      super.noSuchMethod(Invocation.method(#didRemove, [route, previousRoute]),
          returnValueForMissingStub: null);
  @override
  void didStartUserGesture(
          _i14.Route<dynamic>? route, _i14.Route<dynamic>? previousRoute) =>
      super.noSuchMethod(
          Invocation.method(#didStartUserGesture, [route, previousRoute]),
          returnValueForMissingStub: null);
}

/// A class which mocks [PermissionsManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockPermissionsManager extends _i1.Mock
    implements _i16.PermissionsManager {
  MockPermissionsManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i16.PermissionState> status(_i16.PermissionKind? permission) =>
      (super.noSuchMethod(Invocation.method(#status, [permission]),
              returnValue: Future.value(_i16.PermissionState.granted))
          as _i4.Future<_i16.PermissionState>);
  @override
  _i4.Future<_i16.PermissionState> request(_i16.PermissionKind? permission) =>
      (super.noSuchMethod(Invocation.method(#request, [permission]),
              returnValue: Future.value(_i16.PermissionState.granted))
          as _i4.Future<_i16.PermissionState>);
  @override
  _i4.Future<bool> openAppSettings() =>
      (super.noSuchMethod(Invocation.method(#openAppSettings, []),
          returnValue: Future.value(false)) as _i4.Future<bool>);
}

/// A class which mocks [ViewedProductsStorage].
///
/// See the documentation for Mockito's code generation for more information.
class MockViewedProductsStorage extends _i1.Mock
    implements _i17.ViewedProductsStorage {
  MockViewedProductsStorage() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Stream<void> updates() =>
      (super.noSuchMethod(Invocation.method(#updates, []),
          returnValue: Stream<void>.empty()) as _i4.Stream<void>);
  @override
  _i4.Future<void> loadPersistentProductsForTesting() => (super.noSuchMethod(
      Invocation.method(#loadPersistentProductsForTesting, []),
      returnValue: Future.value(null),
      returnValueForMissingStub: Future.value()) as _i4.Future<void>);
  @override
  List<_i5.Product> getProducts() =>
      (super.noSuchMethod(Invocation.method(#getProducts, []),
          returnValue: <_i5.Product>[]) as List<_i5.Product>);
  @override
  void addProduct(_i5.Product? product) =>
      super.noSuchMethod(Invocation.method(#addProduct, [product]),
          returnValueForMissingStub: null);
  @override
  _i4.Future<void> purgeForTesting() =>
      (super.noSuchMethod(Invocation.method(#purgeForTesting, []),
          returnValue: Future.value(null),
          returnValueForMissingStub: Future.value()) as _i4.Future<void>);
}
