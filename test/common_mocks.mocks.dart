// Mocks generated by Mockito 5.0.15 from annotations
// in plante/test/common_mocks.dart.
// Do not manually edit this file.

import 'dart:async' as _i9;
import 'dart:io' as _i47;
import 'dart:typed_data' as _i31;

import 'package:flutter/material.dart' as _i46;
import 'package:flutter/services.dart' as _i48;
import 'package:google_maps_flutter/google_maps_flutter.dart' as _i30;
import 'package:google_maps_flutter_platform_interface/google_maps_flutter_platform_interface.dart'
    as _i4;
import 'package:mockito/mockito.dart' as _i1;
import 'package:openfoodfacts/model/OcrIngredientsResult.dart' as _i6;
import 'package:openfoodfacts/openfoodfacts.dart' as _i5;
import 'package:plante/base/base.dart' as _i35;
import 'package:plante/base/permissions_manager.dart' as _i44;
import 'package:plante/base/result.dart' as _i2;
import 'package:plante/lang/sys_lang_code_holder.dart' as _i58;
import 'package:plante/lang/user_langs_manager.dart' as _i59;
import 'package:plante/lang/user_langs_manager_error.dart' as _i60;
import 'package:plante/location/geolocator_wrapper.dart' as _i27;
import 'package:plante/location/ip_location_provider.dart' as _i32;
import 'package:plante/location/location_controller.dart' as _i34;
import 'package:plante/model/coord.dart' as _i14;
import 'package:plante/model/coords_bounds.dart' as _i41;
import 'package:plante/model/lang_code.dart' as _i22;
import 'package:plante/model/product.dart' as _i50;
import 'package:plante/model/shop.dart' as _i12;
import 'package:plante/model/shop_product_range.dart' as _i56;
import 'package:plante/model/shop_type.dart' as _i57;
import 'package:plante/model/user_langs.dart' as _i7;
import 'package:plante/model/user_params.dart' as _i18;
import 'package:plante/model/user_params_controller.dart' as _i61;
import 'package:plante/model/veg_status.dart' as _i21;
import 'package:plante/model/viewed_products_storage.dart' as _i62;
import 'package:plante/outside/backend/backend.dart' as _i17;
import 'package:plante/outside/backend/backend_error.dart' as _i19;
import 'package:plante/outside/backend/backend_product.dart' as _i20;
import 'package:plante/outside/backend/backend_products_at_shop.dart' as _i23;
import 'package:plante/outside/backend/backend_response.dart' as _i3;
import 'package:plante/outside/backend/backend_shop.dart' as _i25;
import 'package:plante/outside/identity/apple_authorizer.dart' as _i15;
import 'package:plante/outside/identity/apple_user.dart' as _i16;
import 'package:plante/outside/identity/google_authorizer.dart' as _i28;
import 'package:plante/outside/identity/google_user.dart' as _i29;
import 'package:plante/outside/map/address_obtainer.dart' as _i8;
import 'package:plante/outside/map/directions_manager.dart' as _i26;
import 'package:plante/outside/map/open_street_map.dart' as _i11;
import 'package:plante/outside/map/osm_address.dart' as _i13;
import 'package:plante/outside/map/osm_nominatim.dart' as _i37;
import 'package:plante/outside/map/osm_overpass.dart' as _i39;
import 'package:plante/outside/map/osm_road.dart' as _i42;
import 'package:plante/outside/map/osm_search_result.dart' as _i38;
import 'package:plante/outside/map/osm_searcher.dart' as _i43;
import 'package:plante/outside/map/osm_shop.dart' as _i40;
import 'package:plante/outside/map/osm_short_address.dart' as _i10;
import 'package:plante/outside/map/osm_uid.dart' as _i24;
import 'package:plante/outside/map/roads_manager.dart' as _i53;
import 'package:plante/outside/map/shops_manager.dart' as _i54;
import 'package:plante/outside/map/shops_manager_types.dart' as _i55;
import 'package:plante/outside/off/off_api.dart' as _i36;
import 'package:plante/outside/products/products_manager.dart' as _i49;
import 'package:plante/outside/products/products_manager_error.dart' as _i51;
import 'package:plante/outside/products/products_obtainer.dart' as _i52;
import 'package:plante/ui/map/latest_camera_pos_storage.dart' as _i33;
import 'package:plante/ui/photos_taker.dart' as _i45;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

class _FakeResult_0<OK, ERR> extends _i1.Fake implements _i2.Result<OK, ERR> {}

class _FakeBackendResponse_1 extends _i1.Fake implements _i3.BackendResponse {}

class _FakeLatLngBounds_2 extends _i1.Fake implements _i4.LatLngBounds {}

class _FakeScreenCoordinate_3 extends _i1.Fake implements _i4.ScreenCoordinate {
}

class _FakeLatLng_4 extends _i1.Fake implements _i4.LatLng {}

class _FakeProductResult_5 extends _i1.Fake implements _i5.ProductResult {}

class _FakeStatus_6 extends _i1.Fake implements _i5.Status {}

class _FakeOcrIngredientsResult_7 extends _i1.Fake
    implements _i6.OcrIngredientsResult {}

class _FakeUserLangs_8 extends _i1.Fake implements _i7.UserLangs {}

/// A class which mocks [AddressObtainer].
///
/// See the documentation for Mockito's code generation for more information.
class MockAddressObtainer extends _i1.Mock implements _i8.AddressObtainer {
  MockAddressObtainer() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.Future<_i2.Result<_i10.OsmShortAddress, _i11.OpenStreetMapError>>
      addressOfShop(_i12.Shop? shop) => (super.noSuchMethod(
          Invocation.method(#addressOfShop, [shop]),
          returnValue:
              Future<_i2.Result<_i10.OsmShortAddress, _i11.OpenStreetMapError>>.value(
                  _FakeResult_0<_i10.OsmShortAddress,
                      _i11.OpenStreetMapError>())) as _i9
          .Future<_i2.Result<_i10.OsmShortAddress, _i11.OpenStreetMapError>>);
  @override
  _i9.Future<_i2.Result<_i13.OsmAddress, _i11.OpenStreetMapError>>
      addressOfCoords(_i14.Coord? coords) => (super.noSuchMethod(
          Invocation.method(#addressOfCoords, [coords]),
          returnValue: Future<
                  _i2.Result<_i13.OsmAddress, _i11.OpenStreetMapError>>.value(
              _FakeResult_0<_i13.OsmAddress, _i11.OpenStreetMapError>())) as _i9
          .Future<_i2.Result<_i13.OsmAddress, _i11.OpenStreetMapError>>);
  @override
  _i9.Future<_i2.Result<_i10.OsmShortAddress, _i11.OpenStreetMapError>>
      shortAddressOfCoords(_i14.Coord? coords) => (super.noSuchMethod(
          Invocation.method(#shortAddressOfCoords, [coords]),
          returnValue:
              Future<_i2.Result<_i10.OsmShortAddress, _i11.OpenStreetMapError>>.value(
                  _FakeResult_0<_i10.OsmShortAddress,
                      _i11.OpenStreetMapError>())) as _i9
          .Future<_i2.Result<_i10.OsmShortAddress, _i11.OpenStreetMapError>>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [AppleAuthorizer].
///
/// See the documentation for Mockito's code generation for more information.
class MockAppleAuthorizer extends _i1.Mock implements _i15.AppleAuthorizer {
  MockAppleAuthorizer() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.Future<_i16.AppleUser?> auth() =>
      (super.noSuchMethod(Invocation.method(#auth, []),
              returnValue: Future<_i16.AppleUser?>.value())
          as _i9.Future<_i16.AppleUser?>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [Backend].
///
/// See the documentation for Mockito's code generation for more information.
class MockBackend extends _i1.Mock implements _i17.Backend {
  MockBackend() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void addObserver(_i17.BackendObserver? observer) =>
      super.noSuchMethod(Invocation.method(#addObserver, [observer]),
          returnValueForMissingStub: null);
  @override
  void removeObserver(_i17.BackendObserver? observer) =>
      super.noSuchMethod(Invocation.method(#removeObserver, [observer]),
          returnValueForMissingStub: null);
  @override
  _i9.Future<bool> isLoggedIn() =>
      (super.noSuchMethod(Invocation.method(#isLoggedIn, []),
          returnValue: Future<bool>.value(false)) as _i9.Future<bool>);
  @override
  _i9.Future<_i2.Result<_i18.UserParams, _i19.BackendError>> loginOrRegister(
          {String? googleIdToken, String? appleAuthorizationCode}) =>
      (super.noSuchMethod(
              Invocation.method(#loginOrRegister, [], {
                #googleIdToken: googleIdToken,
                #appleAuthorizationCode: appleAuthorizationCode
              }),
              returnValue:
                  Future<_i2.Result<_i18.UserParams, _i19.BackendError>>.value(
                      _FakeResult_0<_i18.UserParams, _i19.BackendError>()))
          as _i9.Future<_i2.Result<_i18.UserParams, _i19.BackendError>>);
  @override
  _i9.Future<_i2.Result<bool, _i19.BackendError>> updateUserParams(
          _i18.UserParams? userParams,
          {String? backendClientTokenOverride}) =>
      (super.noSuchMethod(
              Invocation.method(#updateUserParams, [userParams],
                  {#backendClientTokenOverride: backendClientTokenOverride}),
              returnValue: Future<_i2.Result<bool, _i19.BackendError>>.value(
                  _FakeResult_0<bool, _i19.BackendError>()))
          as _i9.Future<_i2.Result<bool, _i19.BackendError>>);
  @override
  _i9.Future<_i2.Result<_i20.BackendProduct?, _i19.BackendError>>
      requestProduct(String? barcode) => (super.noSuchMethod(
          Invocation.method(#requestProduct, [barcode]),
          returnValue: Future<
                  _i2.Result<_i20.BackendProduct?, _i19.BackendError>>.value(
              _FakeResult_0<_i20.BackendProduct?, _i19.BackendError>())) as _i9
          .Future<_i2.Result<_i20.BackendProduct?, _i19.BackendError>>);
  @override
  _i9.Future<_i2.Result<_i2.None, _i19.BackendError>> createUpdateProduct(
          String? barcode,
          {_i21.VegStatus? vegetarianStatus,
          _i21.VegStatus? veganStatus,
          List<_i22.LangCode>? changedLangs}) =>
      (super.noSuchMethod(
          Invocation.method(#createUpdateProduct, [
            barcode
          ], {
            #vegetarianStatus: vegetarianStatus,
            #veganStatus: veganStatus,
            #changedLangs: changedLangs
          }),
          returnValue: Future<_i2.Result<_i2.None, _i19.BackendError>>.value(
              _FakeResult_0<_i2.None, _i19.BackendError>())) as _i9
          .Future<_i2.Result<_i2.None, _i19.BackendError>>);
  @override
  _i9.Future<_i2.Result<_i2.None, _i19.BackendError>> sendReport(
          String? barcode, String? reportText) =>
      (super.noSuchMethod(Invocation.method(#sendReport, [barcode, reportText]),
          returnValue: Future<_i2.Result<_i2.None, _i19.BackendError>>.value(
              _FakeResult_0<_i2.None, _i19.BackendError>())) as _i9
          .Future<_i2.Result<_i2.None, _i19.BackendError>>);
  @override
  _i9.Future<_i2.Result<_i2.None, _i19.BackendError>> sendProductScan(
          String? barcode) =>
      (super.noSuchMethod(Invocation.method(#sendProductScan, [barcode]),
          returnValue: Future<_i2.Result<_i2.None, _i19.BackendError>>.value(
              _FakeResult_0<_i2.None, _i19.BackendError>())) as _i9
          .Future<_i2.Result<_i2.None, _i19.BackendError>>);
  @override
  _i9.Future<_i2.Result<_i18.UserParams, _i19.BackendError>> userData() =>
      (super.noSuchMethod(Invocation.method(#userData, []),
              returnValue:
                  Future<_i2.Result<_i18.UserParams, _i19.BackendError>>.value(
                      _FakeResult_0<_i18.UserParams, _i19.BackendError>()))
          as _i9.Future<_i2.Result<_i18.UserParams, _i19.BackendError>>);
  @override
  _i9.Future<_i2.Result<List<_i23.BackendProductsAtShop>, _i19.BackendError>>
      requestProductsAtShops(Iterable<_i24.OsmUID>? osmUIDs) =>
          (super.noSuchMethod(Invocation.method(#requestProductsAtShops, [osmUIDs]),
              returnValue:
                  Future<_i2.Result<List<_i23.BackendProductsAtShop>, _i19.BackendError>>.value(
                      _FakeResult_0<List<_i23.BackendProductsAtShop>,
                          _i19.BackendError>())) as _i9
              .Future<_i2.Result<List<_i23.BackendProductsAtShop>, _i19.BackendError>>);
  @override
  _i9.Future<_i2.Result<List<_i25.BackendShop>, _i19.BackendError>>
      requestShops(Iterable<_i24.OsmUID>? osmUIDs) => (super.noSuchMethod(
          Invocation.method(#requestShops, [osmUIDs]),
          returnValue: Future<
                  _i2.Result<List<_i25.BackendShop>, _i19.BackendError>>.value(
              _FakeResult_0<List<_i25.BackendShop>, _i19.BackendError>())) as _i9
          .Future<_i2.Result<List<_i25.BackendShop>, _i19.BackendError>>);
  @override
  _i9.Future<_i2.Result<_i2.None, _i19.BackendError>> productPresenceVote(
          String? barcode, _i24.OsmUID? osmUID, bool? positive) =>
      (super.noSuchMethod(
          Invocation.method(#productPresenceVote, [barcode, osmUID, positive]),
          returnValue: Future<_i2.Result<_i2.None, _i19.BackendError>>.value(
              _FakeResult_0<_i2.None, _i19.BackendError>())) as _i9
          .Future<_i2.Result<_i2.None, _i19.BackendError>>);
  @override
  _i9.Future<_i2.Result<_i2.None, _i19.BackendError>> putProductToShop(
          String? barcode, _i24.OsmUID? osmUID) =>
      (super.noSuchMethod(
          Invocation.method(#putProductToShop, [barcode, osmUID]),
          returnValue: Future<_i2.Result<_i2.None, _i19.BackendError>>.value(
              _FakeResult_0<_i2.None, _i19.BackendError>())) as _i9
          .Future<_i2.Result<_i2.None, _i19.BackendError>>);
  @override
  _i9.Future<_i2.Result<_i25.BackendShop, _i19.BackendError>> createShop(
          {String? name, _i14.Coord? coord, String? type}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #createShop, [], {#name: name, #coord: coord, #type: type}),
              returnValue:
                  Future<_i2.Result<_i25.BackendShop, _i19.BackendError>>.value(
                      _FakeResult_0<_i25.BackendShop, _i19.BackendError>()))
          as _i9.Future<_i2.Result<_i25.BackendShop, _i19.BackendError>>);
  @override
  _i9.Future<_i3.BackendResponse> customGet(String? path,
          [Map<String, String>? queryParams, Map<String, String>? headers]) =>
      (super.noSuchMethod(
              Invocation.method(#customGet, [path, queryParams, headers]),
              returnValue:
                  Future<_i3.BackendResponse>.value(_FakeBackendResponse_1()))
          as _i9.Future<_i3.BackendResponse>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [BackendObserver].
///
/// See the documentation for Mockito's code generation for more information.
class MockBackendObserver extends _i1.Mock implements _i17.BackendObserver {
  MockBackendObserver() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void onBackendError(_i19.BackendError? error) =>
      super.noSuchMethod(Invocation.method(#onBackendError, [error]),
          returnValueForMissingStub: null);
  @override
  String toString() => super.toString();
}

/// A class which mocks [DirectionsManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockDirectionsManager extends _i1.Mock implements _i26.DirectionsManager {
  MockDirectionsManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.Future<bool> areDirectionsAvailable() =>
      (super.noSuchMethod(Invocation.method(#areDirectionsAvailable, []),
          returnValue: Future<bool>.value(false)) as _i9.Future<bool>);
  @override
  void direct(_i14.Coord? destination, String? destinationTitle) => super
      .noSuchMethod(Invocation.method(#direct, [destination, destinationTitle]),
          returnValueForMissingStub: null);
  @override
  String toString() => super.toString();
}

/// A class which mocks [GeolocatorWrapper].
///
/// See the documentation for Mockito's code generation for more information.
class MockGeolocatorWrapper extends _i1.Mock implements _i27.GeolocatorWrapper {
  MockGeolocatorWrapper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.Future<_i14.Coord?> getLastKnownPosition() =>
      (super.noSuchMethod(Invocation.method(#getLastKnownPosition, []),
          returnValue: Future<_i14.Coord?>.value()) as _i9.Future<_i14.Coord?>);
  @override
  _i9.Future<_i14.Coord?> getCurrentPosition() =>
      (super.noSuchMethod(Invocation.method(#getCurrentPosition, []),
          returnValue: Future<_i14.Coord?>.value()) as _i9.Future<_i14.Coord?>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [GoogleAuthorizer].
///
/// See the documentation for Mockito's code generation for more information.
class MockGoogleAuthorizer extends _i1.Mock implements _i28.GoogleAuthorizer {
  MockGoogleAuthorizer() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.Future<_i29.GoogleUser?> auth() =>
      (super.noSuchMethod(Invocation.method(#auth, []),
              returnValue: Future<_i29.GoogleUser?>.value())
          as _i9.Future<_i29.GoogleUser?>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [GoogleMapController].
///
/// See the documentation for Mockito's code generation for more information.
class MockGoogleMapController extends _i1.Mock
    implements _i30.GoogleMapController {
  MockGoogleMapController() {
    _i1.throwOnMissingStub(this);
  }

  @override
  int get mapId =>
      (super.noSuchMethod(Invocation.getter(#mapId), returnValue: 0) as int);
  @override
  _i9.Future<void> clearTileCache(_i4.TileOverlayId? tileOverlayId) =>
      (super.noSuchMethod(Invocation.method(#clearTileCache, [tileOverlayId]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<void> animateCamera(_i4.CameraUpdate? cameraUpdate) =>
      (super.noSuchMethod(Invocation.method(#animateCamera, [cameraUpdate]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<void> moveCamera(_i4.CameraUpdate? cameraUpdate) =>
      (super.noSuchMethod(Invocation.method(#moveCamera, [cameraUpdate]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<void> setMapStyle(String? mapStyle) =>
      (super.noSuchMethod(Invocation.method(#setMapStyle, [mapStyle]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<_i4.LatLngBounds> getVisibleRegion() => (super.noSuchMethod(
          Invocation.method(#getVisibleRegion, []),
          returnValue: Future<_i4.LatLngBounds>.value(_FakeLatLngBounds_2()))
      as _i9.Future<_i4.LatLngBounds>);
  @override
  _i9.Future<_i4.ScreenCoordinate> getScreenCoordinate(_i4.LatLng? latLng) =>
      (super.noSuchMethod(Invocation.method(#getScreenCoordinate, [latLng]),
              returnValue:
                  Future<_i4.ScreenCoordinate>.value(_FakeScreenCoordinate_3()))
          as _i9.Future<_i4.ScreenCoordinate>);
  @override
  _i9.Future<_i4.LatLng> getLatLng(_i4.ScreenCoordinate? screenCoordinate) =>
      (super.noSuchMethod(Invocation.method(#getLatLng, [screenCoordinate]),
              returnValue: Future<_i4.LatLng>.value(_FakeLatLng_4()))
          as _i9.Future<_i4.LatLng>);
  @override
  _i9.Future<void> showMarkerInfoWindow(_i4.MarkerId? markerId) =>
      (super.noSuchMethod(Invocation.method(#showMarkerInfoWindow, [markerId]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<void> hideMarkerInfoWindow(_i4.MarkerId? markerId) =>
      (super.noSuchMethod(Invocation.method(#hideMarkerInfoWindow, [markerId]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<bool> isMarkerInfoWindowShown(_i4.MarkerId? markerId) => (super
      .noSuchMethod(Invocation.method(#isMarkerInfoWindowShown, [markerId]),
          returnValue: Future<bool>.value(false)) as _i9.Future<bool>);
  @override
  _i9.Future<double> getZoomLevel() =>
      (super.noSuchMethod(Invocation.method(#getZoomLevel, []),
          returnValue: Future<double>.value(0.0)) as _i9.Future<double>);
  @override
  _i9.Future<_i31.Uint8List?> takeSnapshot() =>
      (super.noSuchMethod(Invocation.method(#takeSnapshot, []),
              returnValue: Future<_i31.Uint8List?>.value())
          as _i9.Future<_i31.Uint8List?>);
  @override
  void dispose() => super.noSuchMethod(Invocation.method(#dispose, []),
      returnValueForMissingStub: null);
  @override
  String toString() => super.toString();
}

/// A class which mocks [IpLocationProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockIpLocationProvider extends _i1.Mock
    implements _i32.IpLocationProvider {
  MockIpLocationProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.Future<_i14.Coord?> positionByIP() =>
      (super.noSuchMethod(Invocation.method(#positionByIP, []),
          returnValue: Future<_i14.Coord?>.value()) as _i9.Future<_i14.Coord?>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [LatestCameraPosStorage].
///
/// See the documentation for Mockito's code generation for more information.
class MockLatestCameraPosStorage extends _i1.Mock
    implements _i33.LatestCameraPosStorage {
  MockLatestCameraPosStorage() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.Future<void> set(_i14.Coord? pos) =>
      (super.noSuchMethod(Invocation.method(#set, [pos]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<_i14.Coord?> get() =>
      (super.noSuchMethod(Invocation.method(#get, []),
          returnValue: Future<_i14.Coord?>.value()) as _i9.Future<_i14.Coord?>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [LocationController].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocationController extends _i1.Mock
    implements _i34.LocationController {
  MockLocationController() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.Future<_i14.Coord?> lastKnownPosition() =>
      (super.noSuchMethod(Invocation.method(#lastKnownPosition, []),
          returnValue: Future<_i14.Coord?>.value()) as _i9.Future<_i14.Coord?>);
  @override
  _i9.Future<_i14.Coord?> currentPosition() =>
      (super.noSuchMethod(Invocation.method(#currentPosition, []),
          returnValue: Future<_i14.Coord?>.value()) as _i9.Future<_i14.Coord?>);
  @override
  void callWhenLastPositionKnown(_i35.ArgCallback<_i14.Coord>? callback) =>
      super.noSuchMethod(
          Invocation.method(#callWhenLastPositionKnown, [callback]),
          returnValueForMissingStub: null);
  @override
  String toString() => super.toString();
}

/// A class which mocks [OffApi].
///
/// See the documentation for Mockito's code generation for more information.
class MockOffApi extends _i1.Mock implements _i36.OffApi {
  MockOffApi() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.Future<_i5.ProductResult> getProduct(
          _i5.ProductQueryConfiguration? configuration) =>
      (super.noSuchMethod(Invocation.method(#getProduct, [configuration]),
              returnValue:
                  Future<_i5.ProductResult>.value(_FakeProductResult_5()))
          as _i9.Future<_i5.ProductResult>);
  @override
  _i9.Future<_i5.Status> saveProduct(_i5.User? user, _i5.Product? product) =>
      (super.noSuchMethod(Invocation.method(#saveProduct, [user, product]),
              returnValue: Future<_i5.Status>.value(_FakeStatus_6()))
          as _i9.Future<_i5.Status>);
  @override
  _i9.Future<_i5.Status> addProductImage(
          _i5.User? user, _i5.SendImage? image) =>
      (super.noSuchMethod(Invocation.method(#addProductImage, [user, image]),
              returnValue: Future<_i5.Status>.value(_FakeStatus_6()))
          as _i9.Future<_i5.Status>);
  @override
  _i9.Future<_i6.OcrIngredientsResult> extractIngredients(_i5.User? user,
          String? barcode, _i5.OpenFoodFactsLanguage? language) =>
      (super.noSuchMethod(
              Invocation.method(#extractIngredients, [user, barcode, language]),
              returnValue: Future<_i6.OcrIngredientsResult>.value(
                  _FakeOcrIngredientsResult_7()))
          as _i9.Future<_i6.OcrIngredientsResult>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [OsmNominatim].
///
/// See the documentation for Mockito's code generation for more information.
class MockOsmNominatim extends _i1.Mock implements _i37.OsmNominatim {
  MockOsmNominatim() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.Future<_i2.Result<_i13.OsmAddress, _i11.OpenStreetMapError>> fetchAddress(
          double? lat, double? lon) =>
      (super.noSuchMethod(Invocation.method(#fetchAddress, [lat, lon]),
          returnValue: Future<
                  _i2.Result<_i13.OsmAddress, _i11.OpenStreetMapError>>.value(
              _FakeResult_0<_i13.OsmAddress, _i11.OpenStreetMapError>())) as _i9
          .Future<_i2.Result<_i13.OsmAddress, _i11.OpenStreetMapError>>);
  @override
  _i9.Future<_i2.Result<_i38.OsmSearchResult, _i11.OpenStreetMapError>> search(
          String? country, String? city, String? query) =>
      (super.noSuchMethod(Invocation.method(#search, [country, city, query]),
          returnValue:
              Future<_i2.Result<_i38.OsmSearchResult, _i11.OpenStreetMapError>>.value(
                  _FakeResult_0<_i38.OsmSearchResult,
                      _i11.OpenStreetMapError>())) as _i9
          .Future<_i2.Result<_i38.OsmSearchResult, _i11.OpenStreetMapError>>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [OsmOverpass].
///
/// See the documentation for Mockito's code generation for more information.
class MockOsmOverpass extends _i1.Mock implements _i39.OsmOverpass {
  MockOsmOverpass() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Map<String, String> get urls => (super.noSuchMethod(Invocation.getter(#urls),
      returnValue: <String, String>{}) as Map<String, String>);
  @override
  _i9.Future<_i2.Result<List<_i40.OsmShop>, _i11.OpenStreetMapError>> fetchShops(
          {_i41.CoordsBounds? bounds, Iterable<_i24.OsmUID>? osmUIDs}) =>
      (super.noSuchMethod(
          Invocation.method(
              #fetchShops, [], {#bounds: bounds, #osmUIDs: osmUIDs}),
          returnValue:
              Future<_i2.Result<List<_i40.OsmShop>, _i11.OpenStreetMapError>>.value(
                  _FakeResult_0<List<_i40.OsmShop>, _i11.OpenStreetMapError>())) as _i9
          .Future<_i2.Result<List<_i40.OsmShop>, _i11.OpenStreetMapError>>);
  @override
  _i9.Future<_i2.Result<List<_i42.OsmRoad>, _i11.OpenStreetMapError>>
      fetchRoads(_i41.CoordsBounds? bounds) => (super.noSuchMethod(
          Invocation.method(#fetchRoads, [bounds]),
          returnValue: Future<
                  _i2.Result<List<_i42.OsmRoad>, _i11.OpenStreetMapError>>.value(
              _FakeResult_0<List<_i42.OsmRoad>, _i11.OpenStreetMapError>())) as _i9
          .Future<_i2.Result<List<_i42.OsmRoad>, _i11.OpenStreetMapError>>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [OsmSearcher].
///
/// See the documentation for Mockito's code generation for more information.
class MockOsmSearcher extends _i1.Mock implements _i43.OsmSearcher {
  MockOsmSearcher() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.Future<_i2.Result<_i38.OsmSearchResult, _i11.OpenStreetMapError>> search(
          String? country, String? city, String? query) =>
      (super.noSuchMethod(Invocation.method(#search, [country, city, query]),
          returnValue:
              Future<_i2.Result<_i38.OsmSearchResult, _i11.OpenStreetMapError>>.value(
                  _FakeResult_0<_i38.OsmSearchResult,
                      _i11.OpenStreetMapError>())) as _i9
          .Future<_i2.Result<_i38.OsmSearchResult, _i11.OpenStreetMapError>>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [PermissionsManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockPermissionsManager extends _i1.Mock
    implements _i44.PermissionsManager {
  MockPermissionsManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.Future<_i44.PermissionState> status(_i44.PermissionKind? permission) =>
      (super.noSuchMethod(Invocation.method(#status, [permission]),
              returnValue: Future<_i44.PermissionState>.value(
                  _i44.PermissionState.granted))
          as _i9.Future<_i44.PermissionState>);
  @override
  _i9.Future<_i44.PermissionState> request(_i44.PermissionKind? permission) =>
      (super.noSuchMethod(Invocation.method(#request, [permission]),
              returnValue: Future<_i44.PermissionState>.value(
                  _i44.PermissionState.granted))
          as _i9.Future<_i44.PermissionState>);
  @override
  _i9.Future<bool> openAppSettings() =>
      (super.noSuchMethod(Invocation.method(#openAppSettings, []),
          returnValue: Future<bool>.value(false)) as _i9.Future<bool>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [PhotosTaker].
///
/// See the documentation for Mockito's code generation for more information.
class MockPhotosTaker extends _i1.Mock implements _i45.PhotosTaker {
  MockPhotosTaker() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.Future<Uri?> takeAndCropPhoto(
          _i46.BuildContext? context, _i47.Directory? outFolder) =>
      (super.noSuchMethod(
          Invocation.method(#takeAndCropPhoto, [context, outFolder]),
          returnValue: Future<Uri?>.value()) as _i9.Future<Uri?>);
  @override
  _i9.Future<Uri?> cropPhoto(String? photoPath, _i46.BuildContext? context,
          _i47.Directory? outFolder) =>
      (super.noSuchMethod(
          Invocation.method(#cropPhoto, [photoPath, context, outFolder]),
          returnValue: Future<Uri?>.value()) as _i9.Future<Uri?>);
  @override
  _i9.Future<_i2.Result<Uri, _i48.PlatformException>?> retrieveLostPhoto() =>
      (super.noSuchMethod(Invocation.method(#retrieveLostPhoto, []),
              returnValue:
                  Future<_i2.Result<Uri, _i48.PlatformException>?>.value())
          as _i9.Future<_i2.Result<Uri, _i48.PlatformException>?>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [ProductsManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockProductsManager extends _i1.Mock implements _i49.ProductsManager {
  MockProductsManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.Future<_i2.Result<_i50.Product?, _i51.ProductsManagerError>> getProduct(
          String? barcodeRaw, List<_i22.LangCode>? langsPrioritized) =>
      (super.noSuchMethod(
          Invocation.method(#getProduct, [barcodeRaw, langsPrioritized]),
          returnValue: Future<
                  _i2.Result<_i50.Product?, _i51.ProductsManagerError>>.value(
              _FakeResult_0<_i50.Product?, _i51.ProductsManagerError>())) as _i9
          .Future<_i2.Result<_i50.Product?, _i51.ProductsManagerError>>);
  @override
  _i9.Future<_i2.Result<_i50.Product?, _i51.ProductsManagerError>> inflate(
          _i20.BackendProduct? backendProduct,
          List<_i22.LangCode>? langsPrioritized) =>
      (super.noSuchMethod(
          Invocation.method(#inflate, [backendProduct, langsPrioritized]),
          returnValue: Future<
                  _i2.Result<_i50.Product?, _i51.ProductsManagerError>>.value(
              _FakeResult_0<_i50.Product?, _i51.ProductsManagerError>())) as _i9
          .Future<_i2.Result<_i50.Product?, _i51.ProductsManagerError>>);
  @override
  _i9.Future<_i2.Result<_i50.Product, _i51.ProductsManagerError>>
      createUpdateProduct(_i50.Product? product) => (super.noSuchMethod(
          Invocation.method(#createUpdateProduct, [product]),
          returnValue: Future<
                  _i2.Result<_i50.Product, _i51.ProductsManagerError>>.value(
              _FakeResult_0<_i50.Product, _i51.ProductsManagerError>())) as _i9
          .Future<_i2.Result<_i50.Product, _i51.ProductsManagerError>>);
  @override
  _i9.Future<_i2.Result<_i49.ProductWithOCRIngredients, _i51.ProductsManagerError>>
      updateProductAndExtractIngredients(
              _i50.Product? product, _i22.LangCode? ingredientsLangCode) =>
          (super.noSuchMethod(Invocation.method(#updateProductAndExtractIngredients, [product, ingredientsLangCode]),
                  returnValue:
                      Future<_i2.Result<_i49.ProductWithOCRIngredients, _i51.ProductsManagerError>>.value(
                          _FakeResult_0<_i49.ProductWithOCRIngredients, _i51.ProductsManagerError>()))
              as _i9.Future<
                  _i2.Result<_i49.ProductWithOCRIngredients, _i51.ProductsManagerError>>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [ProductsObtainer].
///
/// See the documentation for Mockito's code generation for more information.
class MockProductsObtainer extends _i1.Mock implements _i52.ProductsObtainer {
  MockProductsObtainer() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.Future<_i2.Result<_i50.Product?, _i51.ProductsManagerError>> getProduct(
          String? barcode) =>
      (super.noSuchMethod(Invocation.method(#getProduct, [barcode]),
          returnValue: Future<
                  _i2.Result<_i50.Product?, _i51.ProductsManagerError>>.value(
              _FakeResult_0<_i50.Product?, _i51.ProductsManagerError>())) as _i9
          .Future<_i2.Result<_i50.Product?, _i51.ProductsManagerError>>);
  @override
  _i9.Future<_i2.Result<_i50.Product?, _i51.ProductsManagerError>> inflate(
          _i20.BackendProduct? backendProduct) =>
      (super.noSuchMethod(Invocation.method(#inflate, [backendProduct]),
          returnValue: Future<
                  _i2.Result<_i50.Product?, _i51.ProductsManagerError>>.value(
              _FakeResult_0<_i50.Product?, _i51.ProductsManagerError>())) as _i9
          .Future<_i2.Result<_i50.Product?, _i51.ProductsManagerError>>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [RoadsManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockRoadsManager extends _i1.Mock implements _i53.RoadsManager {
  MockRoadsManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.Future<_i2.Result<List<_i42.OsmRoad>, _i53.RoadsManagerError>>
      fetchRoadsWithinAndNearby(_i41.CoordsBounds? bounds) => (super.noSuchMethod(
              Invocation.method(#fetchRoadsWithinAndNearby, [bounds]),
              returnValue: Future<
                      _i2.Result<List<_i42.OsmRoad>, _i53.RoadsManagerError>>.value(
                  _FakeResult_0<List<_i42.OsmRoad>, _i53.RoadsManagerError>()))
          as _i9.Future<_i2.Result<List<_i42.OsmRoad>, _i53.RoadsManagerError>>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [RouteObserver].
///
/// See the documentation for Mockito's code generation for more information.
class MockRouteObserver<R extends _i46.Route<dynamic>> extends _i1.Mock
    implements _i46.RouteObserver<R> {
  MockRouteObserver() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void subscribe(_i46.RouteAware? routeAware, R? route) =>
      super.noSuchMethod(Invocation.method(#subscribe, [routeAware, route]),
          returnValueForMissingStub: null);
  @override
  void unsubscribe(_i46.RouteAware? routeAware) =>
      super.noSuchMethod(Invocation.method(#unsubscribe, [routeAware]),
          returnValueForMissingStub: null);
  @override
  void didPop(_i46.Route<dynamic>? route, _i46.Route<dynamic>? previousRoute) =>
      super.noSuchMethod(Invocation.method(#didPop, [route, previousRoute]),
          returnValueForMissingStub: null);
  @override
  void didPush(
          _i46.Route<dynamic>? route, _i46.Route<dynamic>? previousRoute) =>
      super.noSuchMethod(Invocation.method(#didPush, [route, previousRoute]),
          returnValueForMissingStub: null);
  @override
  void didRemove(
          _i46.Route<dynamic>? route, _i46.Route<dynamic>? previousRoute) =>
      super.noSuchMethod(Invocation.method(#didRemove, [route, previousRoute]),
          returnValueForMissingStub: null);
  @override
  void didReplace(
          {_i46.Route<dynamic>? newRoute, _i46.Route<dynamic>? oldRoute}) =>
      super.noSuchMethod(
          Invocation.method(
              #didReplace, [], {#newRoute: newRoute, #oldRoute: oldRoute}),
          returnValueForMissingStub: null);
  @override
  void didStartUserGesture(
          _i46.Route<dynamic>? route, _i46.Route<dynamic>? previousRoute) =>
      super.noSuchMethod(
          Invocation.method(#didStartUserGesture, [route, previousRoute]),
          returnValueForMissingStub: null);
  @override
  void didStopUserGesture() =>
      super.noSuchMethod(Invocation.method(#didStopUserGesture, []),
          returnValueForMissingStub: null);
  @override
  String toString() => super.toString();
}

/// A class which mocks [ShopsManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockShopsManager extends _i1.Mock implements _i54.ShopsManager {
  MockShopsManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  int get loadedAreasCount =>
      (super.noSuchMethod(Invocation.getter(#loadedAreasCount), returnValue: 0)
          as int);
  @override
  void addListener(_i55.ShopsManagerListener? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void removeListener(_i55.ShopsManagerListener? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
  @override
  _i9.Future<_i2.Result<Map<_i24.OsmUID, _i12.Shop>, _i55.ShopsManagerError>>
      fetchShops(_i41.CoordsBounds? bounds) =>
          (super.noSuchMethod(Invocation.method(#fetchShops, [bounds]),
              returnValue:
                  Future<_i2.Result<Map<_i24.OsmUID, _i12.Shop>, _i55.ShopsManagerError>>.value(
                      _FakeResult_0<Map<_i24.OsmUID, _i12.Shop>,
                          _i55.ShopsManagerError>())) as _i9
              .Future<_i2.Result<Map<_i24.OsmUID, _i12.Shop>, _i55.ShopsManagerError>>);
  @override
  _i9.Future<_i2.Result<Map<_i24.OsmUID, _i12.Shop>, _i55.ShopsManagerError>>
      inflateOsmShops(Iterable<_i40.OsmShop>? shops) =>
          (super.noSuchMethod(Invocation.method(#inflateOsmShops, [shops]),
              returnValue:
                  Future<_i2.Result<Map<_i24.OsmUID, _i12.Shop>, _i55.ShopsManagerError>>.value(
                      _FakeResult_0<Map<_i24.OsmUID, _i12.Shop>,
                          _i55.ShopsManagerError>())) as _i9
              .Future<_i2.Result<Map<_i24.OsmUID, _i12.Shop>, _i55.ShopsManagerError>>);
  @override
  _i9.Future<_i2.Result<_i56.ShopProductRange, _i55.ShopsManagerError>>
      fetchShopProductRange(_i12.Shop? shop, {bool? noCache = false}) => (super
          .noSuchMethod(
              Invocation.method(
                  #fetchShopProductRange, [shop], {#noCache: noCache}),
              returnValue:
                  Future<_i2.Result<_i56.ShopProductRange, _i55.ShopsManagerError>>.value(
                      _FakeResult_0<_i56.ShopProductRange, _i55.ShopsManagerError>())) as _i9
          .Future<_i2.Result<_i56.ShopProductRange, _i55.ShopsManagerError>>);
  @override
  _i9.Future<_i2.Result<_i2.None, _i55.ShopsManagerError>> putProductToShops(
          _i50.Product? product, List<_i12.Shop>? shops) =>
      (super.noSuchMethod(
              Invocation.method(#putProductToShops, [product, shops]),
              returnValue:
                  Future<_i2.Result<_i2.None, _i55.ShopsManagerError>>.value(
                      _FakeResult_0<_i2.None, _i55.ShopsManagerError>()))
          as _i9.Future<_i2.Result<_i2.None, _i55.ShopsManagerError>>);
  @override
  _i9.Future<_i2.Result<_i12.Shop, _i55.ShopsManagerError>> createShop(
          {String? name, _i14.Coord? coord, _i57.ShopType? type}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #createShop, [], {#name: name, #coord: coord, #type: type}),
              returnValue:
                  Future<_i2.Result<_i12.Shop, _i55.ShopsManagerError>>.value(
                      _FakeResult_0<_i12.Shop, _i55.ShopsManagerError>()))
          as _i9.Future<_i2.Result<_i12.Shop, _i55.ShopsManagerError>>);
  @override
  _i9.Future<void> clearCache() =>
      (super.noSuchMethod(Invocation.method(#clearCache, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [ShopsManagerListener].
///
/// See the documentation for Mockito's code generation for more information.
class MockShopsManagerListener extends _i1.Mock
    implements _i55.ShopsManagerListener {
  MockShopsManagerListener() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void onLocalShopsChange() =>
      super.noSuchMethod(Invocation.method(#onLocalShopsChange, []),
          returnValueForMissingStub: null);
  @override
  String toString() => super.toString();
}

/// A class which mocks [SysLangCodeHolder].
///
/// See the documentation for Mockito's code generation for more information.
class MockSysLangCodeHolder extends _i1.Mock implements _i58.SysLangCodeHolder {
  MockSysLangCodeHolder() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get langCode =>
      (super.noSuchMethod(Invocation.getter(#langCode), returnValue: '')
          as String);
  @override
  set langCode(String? value) =>
      super.noSuchMethod(Invocation.setter(#langCode, value),
          returnValueForMissingStub: null);
  @override
  _i9.Future<String> get langCodeInited =>
      (super.noSuchMethod(Invocation.getter(#langCodeInited),
          returnValue: Future<String>.value('')) as _i9.Future<String>);
  @override
  void callWhenInited(_i35.ArgCallback<String>? callback) =>
      super.noSuchMethod(Invocation.method(#callWhenInited, [callback]),
          returnValueForMissingStub: null);
  @override
  String toString() => super.toString();
}

/// A class which mocks [UserLangsManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserLangsManager extends _i1.Mock implements _i59.UserLangsManager {
  MockUserLangsManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.Future<void> get initFuture =>
      (super.noSuchMethod(Invocation.getter(#initFuture),
          returnValue: Future<void>.value()) as _i9.Future<void>);
  @override
  void addObserver(_i59.UserLangsManagerObserver? observer) =>
      super.noSuchMethod(Invocation.method(#addObserver, [observer]),
          returnValueForMissingStub: null);
  @override
  void removeObserver(_i59.UserLangsManagerObserver? observer) =>
      super.noSuchMethod(Invocation.method(#removeObserver, [observer]),
          returnValueForMissingStub: null);
  @override
  _i9.Future<_i7.UserLangs> getUserLangs() =>
      (super.noSuchMethod(Invocation.method(#getUserLangs, []),
              returnValue: Future<_i7.UserLangs>.value(_FakeUserLangs_8()))
          as _i9.Future<_i7.UserLangs>);
  @override
  _i9.Future<_i2.Result<_i18.UserParams, _i60.UserLangsManagerError>>
      setManualUserLangs(List<_i22.LangCode>? userLangs) => (super.noSuchMethod(
          Invocation.method(#setManualUserLangs, [userLangs]),
          returnValue: Future<
                  _i2.Result<_i18.UserParams, _i60.UserLangsManagerError>>.value(
              _FakeResult_0<_i18.UserParams, _i60.UserLangsManagerError>())) as _i9
          .Future<_i2.Result<_i18.UserParams, _i60.UserLangsManagerError>>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [UserLangsManagerObserver].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserLangsManagerObserver extends _i1.Mock
    implements _i59.UserLangsManagerObserver {
  MockUserLangsManagerObserver() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void onUserLangsChange(_i7.UserLangs? userLangs) =>
      super.noSuchMethod(Invocation.method(#onUserLangsChange, [userLangs]),
          returnValueForMissingStub: null);
  @override
  String toString() => super.toString();
}

/// A class which mocks [UserParamsController].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserParamsController extends _i1.Mock
    implements _i61.UserParamsController {
  MockUserParamsController() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void addObserver(_i61.UserParamsControllerObserver? observer) =>
      super.noSuchMethod(Invocation.method(#addObserver, [observer]),
          returnValueForMissingStub: null);
  @override
  void removeObserver(_i61.UserParamsControllerObserver? observer) =>
      super.noSuchMethod(Invocation.method(#removeObserver, [observer]),
          returnValueForMissingStub: null);
  @override
  _i9.Future<_i18.UserParams?> getUserParams() =>
      (super.noSuchMethod(Invocation.method(#getUserParams, []),
              returnValue: Future<_i18.UserParams?>.value())
          as _i9.Future<_i18.UserParams?>);
  @override
  _i9.Future<void> setUserParams(_i18.UserParams? userParams) =>
      (super.noSuchMethod(Invocation.method(#setUserParams, [userParams]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [ViewedProductsStorage].
///
/// See the documentation for Mockito's code generation for more information.
class MockViewedProductsStorage extends _i1.Mock
    implements _i62.ViewedProductsStorage {
  MockViewedProductsStorage() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.Stream<void> updates() =>
      (super.noSuchMethod(Invocation.method(#updates, []),
          returnValue: Stream<void>.empty()) as _i9.Stream<void>);
  @override
  _i9.Future<void> loadPersistentProductsForTesting() => (super.noSuchMethod(
      Invocation.method(#loadPersistentProductsForTesting, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  List<_i50.Product> getProducts() =>
      (super.noSuchMethod(Invocation.method(#getProducts, []),
          returnValue: <_i50.Product>[]) as List<_i50.Product>);
  @override
  void addProduct(_i50.Product? product) =>
      super.noSuchMethod(Invocation.method(#addProduct, [product]),
          returnValueForMissingStub: null);
  @override
  _i9.Future<void> purgeForTesting() =>
      (super.noSuchMethod(Invocation.method(#purgeForTesting, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  void dispose() => super.noSuchMethod(Invocation.method(#dispose, []),
      returnValueForMissingStub: null);
  @override
  String toString() => super.toString();
}

/// A class which mocks [NavigatorObserver].
///
/// See the documentation for Mockito's code generation for more information.
class MockNavigatorObserver extends _i1.Mock implements _i46.NavigatorObserver {
  @override
  void didPush(
          _i46.Route<dynamic>? route, _i46.Route<dynamic>? previousRoute) =>
      super.noSuchMethod(Invocation.method(#didPush, [route, previousRoute]),
          returnValueForMissingStub: null);
  @override
  void didPop(_i46.Route<dynamic>? route, _i46.Route<dynamic>? previousRoute) =>
      super.noSuchMethod(Invocation.method(#didPop, [route, previousRoute]),
          returnValueForMissingStub: null);
  @override
  void didRemove(
          _i46.Route<dynamic>? route, _i46.Route<dynamic>? previousRoute) =>
      super.noSuchMethod(Invocation.method(#didRemove, [route, previousRoute]),
          returnValueForMissingStub: null);
  @override
  void didReplace(
          {_i46.Route<dynamic>? newRoute, _i46.Route<dynamic>? oldRoute}) =>
      super.noSuchMethod(
          Invocation.method(
              #didReplace, [], {#newRoute: newRoute, #oldRoute: oldRoute}),
          returnValueForMissingStub: null);
  @override
  void didStartUserGesture(
          _i46.Route<dynamic>? route, _i46.Route<dynamic>? previousRoute) =>
      super.noSuchMethod(
          Invocation.method(#didStartUserGesture, [route, previousRoute]),
          returnValueForMissingStub: null);
  @override
  void didStopUserGesture() =>
      super.noSuchMethod(Invocation.method(#didStopUserGesture, []),
          returnValueForMissingStub: null);
  @override
  String toString() => super.toString();
}
