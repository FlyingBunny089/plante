// Mocks generated by Mockito 5.0.10 from annotations
// in plante/test/location/location_controller_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i3;
import 'dart:math' as _i5;

import 'package:mockito/mockito.dart' as _i1;
import 'package:plante/base/permissions_manager.dart' as _i2;
import 'package:plante/location/geolocator_wrapper.dart' as _i4;
import 'package:plante/location/ip_location_provider.dart' as _i6;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: comment_references
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

/// A class which mocks [PermissionsManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockPermissionsManager extends _i1.Mock
    implements _i2.PermissionsManager {
  MockPermissionsManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<_i2.PermissionState> status(_i2.PermissionKind? permission) =>
      (super.noSuchMethod(Invocation.method(#status, [permission]),
          returnValue: Future<_i2.PermissionState>.value(
              _i2.PermissionState.granted)) as _i3.Future<_i2.PermissionState>);
  @override
  _i3.Future<_i2.PermissionState> request(_i2.PermissionKind? permission) =>
      (super.noSuchMethod(Invocation.method(#request, [permission]),
          returnValue: Future<_i2.PermissionState>.value(
              _i2.PermissionState.granted)) as _i3.Future<_i2.PermissionState>);
  @override
  _i3.Future<bool> openAppSettings() =>
      (super.noSuchMethod(Invocation.method(#openAppSettings, []),
          returnValue: Future<bool>.value(false)) as _i3.Future<bool>);
}

/// A class which mocks [GeolocatorWrapper].
///
/// See the documentation for Mockito's code generation for more information.
class MockGeolocatorWrapper extends _i1.Mock implements _i4.GeolocatorWrapper {
  MockGeolocatorWrapper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<_i5.Point<double>?> getLastKnownPosition() =>
      (super.noSuchMethod(Invocation.method(#getLastKnownPosition, []),
              returnValue: Future<_i5.Point<double>?>.value())
          as _i3.Future<_i5.Point<double>?>);
  @override
  _i3.Future<_i5.Point<double>?> getCurrentPosition() =>
      (super.noSuchMethod(Invocation.method(#getCurrentPosition, []),
              returnValue: Future<_i5.Point<double>?>.value())
          as _i3.Future<_i5.Point<double>?>);
}

/// A class which mocks [IpLocationProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockIpLocationProvider extends _i1.Mock
    implements _i6.IpLocationProvider {
  MockIpLocationProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<_i5.Point<double>?> positionByIP() =>
      (super.noSuchMethod(Invocation.method(#positionByIP, []),
              returnValue: Future<_i5.Point<double>?>.value())
          as _i3.Future<_i5.Point<double>?>);
}
