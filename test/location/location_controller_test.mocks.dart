// Mocks generated by Mockito 5.0.3 from annotations
// in plante/test/location/location_controller_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;
import 'dart:math' as _i2;

import 'package:mockito/mockito.dart' as _i1;
import 'package:plante/base/permissions_manager.dart' as _i3;
import 'package:plante/location/geolocator_wrapper.dart' as _i5;
import 'package:plante/location/ip_location_provider.dart' as _i6;

// ignore_for_file: comment_references
// ignore_for_file: unnecessary_parenthesis

class _FakePoint<T extends num> extends _i1.Fake implements _i2.Point<T> {}

/// A class which mocks [PermissionsManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockPermissionsManager extends _i1.Mock
    implements _i3.PermissionsManager {
  MockPermissionsManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i3.PermissionState> status(_i3.PermissionKind? permission) =>
      (super.noSuchMethod(Invocation.method(#status, [permission]),
              returnValue: Future.value(_i3.PermissionState.granted))
          as _i4.Future<_i3.PermissionState>);
  @override
  _i4.Future<_i3.PermissionState> request(_i3.PermissionKind? permission) =>
      (super.noSuchMethod(Invocation.method(#request, [permission]),
              returnValue: Future.value(_i3.PermissionState.granted))
          as _i4.Future<_i3.PermissionState>);
  @override
  _i4.Future<bool> openAppSettings() =>
      (super.noSuchMethod(Invocation.method(#openAppSettings, []),
          returnValue: Future.value(false)) as _i4.Future<bool>);
}

/// A class which mocks [GeolocatorWrapper].
///
/// See the documentation for Mockito's code generation for more information.
class MockGeolocatorWrapper extends _i1.Mock implements _i5.GeolocatorWrapper {
  MockGeolocatorWrapper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Point<double>?> getLastKnownPosition() =>
      (super.noSuchMethod(Invocation.method(#getLastKnownPosition, []),
              returnValue: Future.value(_FakePoint<double>()))
          as _i4.Future<_i2.Point<double>?>);
  @override
  _i4.Future<_i2.Point<double>?> getCurrentPosition() =>
      (super.noSuchMethod(Invocation.method(#getCurrentPosition, []),
              returnValue: Future.value(_FakePoint<double>()))
          as _i4.Future<_i2.Point<double>?>);
}

/// A class which mocks [IpLocationProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockIpLocationProvider extends _i1.Mock
    implements _i6.IpLocationProvider {
  MockIpLocationProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Point<double>?> positionByIP() =>
      (super.noSuchMethod(Invocation.method(#positionByIP, []),
              returnValue: Future.value(_FakePoint<double>()))
          as _i4.Future<_i2.Point<double>?>);
}
