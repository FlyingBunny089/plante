// Mocks generated by Mockito 5.0.3 from annotations
// in plante/test/outside/backend/user_params_auto_wiper_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i5;

import 'package:mockito/mockito.dart' as _i1;
import 'package:plante/base/result.dart' as _i3;
import 'package:plante/model/user_params.dart' as _i2;
import 'package:plante/model/user_params_controller.dart' as _i4;
import 'package:plante/model/veg_status.dart' as _i9;
import 'package:plante/outside/backend/backend.dart' as _i6;
import 'package:plante/outside/backend/backend_error.dart' as _i7;
import 'package:plante/outside/backend/backend_product.dart' as _i8;

// ignore_for_file: comment_references
// ignore_for_file: unnecessary_parenthesis

class _FakeUserParams extends _i1.Fake implements _i2.UserParams {}

class _FakeResult<OK, ERR> extends _i1.Fake implements _i3.Result<OK, ERR> {}

/// A class which mocks [UserParamsController].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserParamsController extends _i1.Mock
    implements _i4.UserParamsController {
  MockUserParamsController() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void addObserver(_i4.UserParamsControllerObserver? observer) =>
      super.noSuchMethod(Invocation.method(#addObserver, [observer]),
          returnValueForMissingStub: null);
  @override
  void removeObserver(_i4.UserParamsControllerObserver? observer) =>
      super.noSuchMethod(Invocation.method(#removeObserver, [observer]),
          returnValueForMissingStub: null);
  @override
  _i5.Future<_i2.UserParams?> getUserParams() =>
      (super.noSuchMethod(Invocation.method(#getUserParams, []),
              returnValue: Future.value(_FakeUserParams()))
          as _i5.Future<_i2.UserParams?>);
  @override
  _i5.Future<void> setUserParams(_i2.UserParams? userParams) =>
      (super.noSuchMethod(Invocation.method(#setUserParams, [userParams]),
          returnValue: Future.value(null),
          returnValueForMissingStub: Future.value()) as _i5.Future<void>);
}

/// A class which mocks [Backend].
///
/// See the documentation for Mockito's code generation for more information.
class MockBackend extends _i1.Mock implements _i6.Backend {
  MockBackend() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void addObserver(_i6.BackendObserver? observer) =>
      super.noSuchMethod(Invocation.method(#addObserver, [observer]),
          returnValueForMissingStub: null);
  @override
  void removeObserver(_i6.BackendObserver? observer) =>
      super.noSuchMethod(Invocation.method(#removeObserver, [observer]),
          returnValueForMissingStub: null);
  @override
  _i5.Future<bool> isLoggedIn() =>
      (super.noSuchMethod(Invocation.method(#isLoggedIn, []),
          returnValue: Future.value(false)) as _i5.Future<bool>);
  @override
  _i5.Future<_i3.Result<_i2.UserParams, _i7.BackendError>> loginOrRegister(
          String? googleIdToken) =>
      (super.noSuchMethod(Invocation.method(#loginOrRegister, [googleIdToken]),
              returnValue:
                  Future.value(_FakeResult<_i2.UserParams, _i7.BackendError>()))
          as _i5.Future<_i3.Result<_i2.UserParams, _i7.BackendError>>);
  @override
  _i5.Future<_i3.Result<bool, _i7.BackendError>> updateUserParams(
          _i2.UserParams? userParams,
          {String? backendClientTokenOverride}) =>
      (super.noSuchMethod(
              Invocation.method(#updateUserParams, [userParams],
                  {#backendClientTokenOverride: backendClientTokenOverride}),
              returnValue: Future.value(_FakeResult<bool, _i7.BackendError>()))
          as _i5.Future<_i3.Result<bool, _i7.BackendError>>);
  @override
  _i5.Future<_i3.Result<_i8.BackendProduct?, _i7.BackendError>> requestProduct(
          String? barcode) =>
      (super.noSuchMethod(Invocation.method(#requestProduct, [barcode]),
              returnValue: Future.value(
                  _FakeResult<_i8.BackendProduct?, _i7.BackendError>()))
          as _i5.Future<_i3.Result<_i8.BackendProduct?, _i7.BackendError>>);
  @override
  _i5.Future<_i3.Result<_i3.None, _i7.BackendError>> createUpdateProduct(
          String? barcode,
          {_i9.VegStatus? vegetarianStatus,
          _i9.VegStatus? veganStatus}) =>
      (super.noSuchMethod(
              Invocation.method(#createUpdateProduct, [
                barcode
              ], {
                #vegetarianStatus: vegetarianStatus,
                #veganStatus: veganStatus
              }),
              returnValue:
                  Future.value(_FakeResult<_i3.None, _i7.BackendError>()))
          as _i5.Future<_i3.Result<_i3.None, _i7.BackendError>>);
  @override
  _i5.Future<_i3.Result<_i3.None, _i7.BackendError>> sendReport(
          String? barcode, String? reportText) =>
      (super.noSuchMethod(Invocation.method(#sendReport, [barcode, reportText]),
              returnValue:
                  Future.value(_FakeResult<_i3.None, _i7.BackendError>()))
          as _i5.Future<_i3.Result<_i3.None, _i7.BackendError>>);
}
