// Mocks generated by Mockito 5.0.10 from annotations
// in plante/test/outside/map/address_obtainer_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;
import 'dart:math' as _i6;

import 'package:mockito/mockito.dart' as _i1;
import 'package:plante/base/result.dart' as _i2;
import 'package:plante/outside/map/open_street_map.dart' as _i3;
import 'package:plante/outside/map/osm_address.dart' as _i7;
import 'package:plante/outside/map/osm_shop.dart' as _i5;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: comment_references
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

class _FakeResult<OK, ERR> extends _i1.Fake implements _i2.Result<OK, ERR> {}

/// A class which mocks [OpenStreetMap].
///
/// See the documentation for Mockito's code generation for more information.
class MockOpenStreetMap extends _i1.Mock implements _i3.OpenStreetMap {
  MockOpenStreetMap() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Result<List<_i5.OsmShop>, _i3.OpenStreetMapError>> fetchShops(
          _i6.Point<double>? northeast, _i6.Point<double>? southwest) =>
      (super.noSuchMethod(
          Invocation.method(#fetchShops, [northeast, southwest]),
          returnValue: Future<
                  _i2.Result<List<_i5.OsmShop>, _i3.OpenStreetMapError>>.value(
              _FakeResult<List<_i5.OsmShop>, _i3.OpenStreetMapError>())) as _i4
          .Future<_i2.Result<List<_i5.OsmShop>, _i3.OpenStreetMapError>>);
  @override
  _i4.Future<_i2.Result<_i7.OsmAddress, _i3.OpenStreetMapError>> fetchAddress(
          double? lat, double? lon) =>
      (super.noSuchMethod(Invocation.method(#fetchAddress, [lat, lon]),
          returnValue:
              Future<_i2.Result<_i7.OsmAddress, _i3.OpenStreetMapError>>.value(
                  _FakeResult<_i7.OsmAddress, _i3.OpenStreetMapError>())) as _i4
          .Future<_i2.Result<_i7.OsmAddress, _i3.OpenStreetMapError>>);
}
