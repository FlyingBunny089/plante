// Mocks generated by Mockito 5.0.3 from annotations
// in untitled_vegan_app/test/outside/products_manager_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i8;

import 'package:either_option/src/either.dart' as _i5;
import 'package:either_option/src/option.dart' as _i17;
import 'package:mockito/mockito.dart' as _i1;
import 'package:openfoodfacts/model/OcrIngredientsResult.dart' as _i4;
import 'package:openfoodfacts/model/Product.dart' as _i11;
import 'package:openfoodfacts/model/ProductResult.dart' as _i2;
import 'package:openfoodfacts/model/SendImage.dart' as _i12;
import 'package:openfoodfacts/model/Status.dart' as _i3;
import 'package:openfoodfacts/model/User.dart' as _i10;
import 'package:openfoodfacts/utils/LanguageHelper.dart' as _i13;
import 'package:openfoodfacts/utils/ProductQueryConfigurations.dart' as _i9;
import 'package:untitled_vegan_app/model/user_params.dart' as _i15;
import 'package:untitled_vegan_app/model/veg_status.dart' as _i18;
import 'package:untitled_vegan_app/outside/backend/backend.dart' as _i14;
import 'package:untitled_vegan_app/outside/backend/backend_error.dart' as _i16;
import 'package:untitled_vegan_app/outside/backend/backend_product.dart' as _i6;
import 'package:untitled_vegan_app/outside/off/off_api.dart' as _i7;

// ignore_for_file: comment_references
// ignore_for_file: unnecessary_parenthesis

class _FakeProductResult extends _i1.Fake implements _i2.ProductResult {}

class _FakeStatus extends _i1.Fake implements _i3.Status {}

class _FakeOcrIngredientsResult extends _i1.Fake
    implements _i4.OcrIngredientsResult {}

class _FakeEither<L, R> extends _i1.Fake implements _i5.Either<L, R> {}

class _FakeBackendProduct extends _i1.Fake implements _i6.BackendProduct {}

/// A class which mocks [OffApi].
///
/// See the documentation for Mockito's code generation for more information.
class MockOffApi extends _i1.Mock implements _i7.OffApi {
  MockOffApi() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<_i2.ProductResult> getProduct(
          _i9.ProductQueryConfiguration? configuration) =>
      (super.noSuchMethod(Invocation.method(#getProduct, [configuration]),
              returnValue: Future.value(_FakeProductResult()))
          as _i8.Future<_i2.ProductResult>);
  @override
  _i8.Future<_i3.Status> saveProduct(_i10.User? user, _i11.Product? product) =>
      (super.noSuchMethod(Invocation.method(#saveProduct, [user, product]),
          returnValue: Future.value(_FakeStatus())) as _i8.Future<_i3.Status>);
  @override
  _i8.Future<_i3.Status> addProductImage(
          _i10.User? user, _i12.SendImage? image) =>
      (super.noSuchMethod(Invocation.method(#addProductImage, [user, image]),
          returnValue: Future.value(_FakeStatus())) as _i8.Future<_i3.Status>);
  @override
  _i8.Future<_i4.OcrIngredientsResult> extractIngredients(_i10.User? user,
          String? barcode, _i13.OpenFoodFactsLanguage? language) =>
      (super.noSuchMethod(
              Invocation.method(#extractIngredients, [user, barcode, language]),
              returnValue: Future.value(_FakeOcrIngredientsResult()))
          as _i8.Future<_i4.OcrIngredientsResult>);
}

/// A class which mocks [Backend].
///
/// See the documentation for Mockito's code generation for more information.
class MockBackend extends _i1.Mock implements _i14.Backend {
  MockBackend() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void addObserver(_i14.BackendObserver? observer) =>
      super.noSuchMethod(Invocation.method(#addObserver, [observer]),
          returnValueForMissingStub: null);
  @override
  void removeObserver(_i14.BackendObserver? observer) =>
      super.noSuchMethod(Invocation.method(#removeObserver, [observer]),
          returnValueForMissingStub: null);
  @override
  _i8.Future<bool> isLoggedIn() =>
      (super.noSuchMethod(Invocation.method(#isLoggedIn, []),
          returnValue: Future.value(false)) as _i8.Future<bool>);
  @override
  _i8.Future<_i5.Either<_i15.UserParams, _i16.BackendError>> loginOrRegister(
          String? googleIdToken) =>
      (super.noSuchMethod(Invocation.method(#loginOrRegister, [googleIdToken]),
              returnValue: Future.value(
                  _FakeEither<_i15.UserParams, _i16.BackendError>()))
          as _i8.Future<_i5.Either<_i15.UserParams, _i16.BackendError>>);
  @override
  _i8.Future<_i5.Either<bool, _i16.BackendError>> updateUserParams(
          _i15.UserParams? userParams) =>
      (super.noSuchMethod(Invocation.method(#updateUserParams, [userParams]),
              returnValue: Future.value(_FakeEither<bool, _i16.BackendError>()))
          as _i8.Future<_i5.Either<bool, _i16.BackendError>>);
  @override
  _i8.Future<_i6.BackendProduct?> requestProduct(String? barcode) =>
      (super.noSuchMethod(Invocation.method(#requestProduct, [barcode]),
              returnValue: Future.value(_FakeBackendProduct()))
          as _i8.Future<_i6.BackendProduct?>);
  @override
  _i8.Future<_i5.Either<_i17.None<dynamic>, _i16.BackendError>> createUpdateProduct(
          String? barcode,
          {_i18.VegStatus? vegetarianStatus,
          _i18.VegStatus? veganStatus}) =>
      (super.noSuchMethod(
              Invocation.method(#createUpdateProduct, [
                barcode
              ], {
                #vegetarianStatus: vegetarianStatus,
                #veganStatus: veganStatus
              }),
              returnValue: Future.value(
                  _FakeEither<_i17.None<dynamic>, _i16.BackendError>()))
          as _i8.Future<_i5.Either<_i17.None<dynamic>, _i16.BackendError>>);
}
